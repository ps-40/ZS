/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ZalandoApiClient.Model
{
    /// <summary>
    /// Zalando API Article Image Schema
    /// </summary>
    [DataContract]
    public partial class ArticleImage :  IEquatable<ArticleImage>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleImage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ArticleImage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleImage" /> class.
        /// </summary>
        /// <param name="OrderNumber">sequence of the article images (required).</param>
        /// <param name="Type">model or non model type article images (required).</param>
        /// <param name="ThumbnailHdUrl">thumbnail HD url of the article images (required).</param>
        /// <param name="SmallUrl">small image of the article (required).</param>
        /// <param name="SmallHdUrl">small HD image of the article (required).</param>
        /// <param name="MediumUrl">medium image of the article (required).</param>
        /// <param name="MediumHdUrl">medium HD image of the article (required).</param>
        /// <param name="LargeUrl">large image of the article (required).</param>
        /// <param name="LargeHdUrl">large HD image of the article (required).</param>
        public ArticleImage(int? OrderNumber = null, string Type = null, string ThumbnailHdUrl = null, string SmallUrl = null, string SmallHdUrl = null, string MediumUrl = null, string MediumHdUrl = null, string LargeUrl = null, string LargeHdUrl = null)
        {
            // to ensure "OrderNumber" is required (not null)
            if (OrderNumber == null)
            {
                throw new InvalidDataException("OrderNumber is a required property for ArticleImage and cannot be null");
            }
            else
            {
                this.OrderNumber = OrderNumber;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for ArticleImage and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "ThumbnailHdUrl" is required (not null)
            if (ThumbnailHdUrl == null)
            {
                throw new InvalidDataException("ThumbnailHdUrl is a required property for ArticleImage and cannot be null");
            }
            else
            {
                this.ThumbnailHdUrl = ThumbnailHdUrl;
            }
            // to ensure "SmallUrl" is required (not null)
            if (SmallUrl == null)
            {
                throw new InvalidDataException("SmallUrl is a required property for ArticleImage and cannot be null");
            }
            else
            {
                this.SmallUrl = SmallUrl;
            }
            // to ensure "SmallHdUrl" is required (not null)
            if (SmallHdUrl == null)
            {
                throw new InvalidDataException("SmallHdUrl is a required property for ArticleImage and cannot be null");
            }
            else
            {
                this.SmallHdUrl = SmallHdUrl;
            }
            // to ensure "MediumUrl" is required (not null)
            if (MediumUrl == null)
            {
                throw new InvalidDataException("MediumUrl is a required property for ArticleImage and cannot be null");
            }
            else
            {
                this.MediumUrl = MediumUrl;
            }
            // to ensure "MediumHdUrl" is required (not null)
            if (MediumHdUrl == null)
            {
                throw new InvalidDataException("MediumHdUrl is a required property for ArticleImage and cannot be null");
            }
            else
            {
                this.MediumHdUrl = MediumHdUrl;
            }
            // to ensure "LargeUrl" is required (not null)
            if (LargeUrl == null)
            {
                throw new InvalidDataException("LargeUrl is a required property for ArticleImage and cannot be null");
            }
            else
            {
                this.LargeUrl = LargeUrl;
            }
            // to ensure "LargeHdUrl" is required (not null)
            if (LargeHdUrl == null)
            {
                throw new InvalidDataException("LargeHdUrl is a required property for ArticleImage and cannot be null");
            }
            else
            {
                this.LargeHdUrl = LargeHdUrl;
            }
        }
        
        /// <summary>
        /// sequence of the article images
        /// </summary>
        /// <value>sequence of the article images</value>
        [DataMember(Name="orderNumber", EmitDefaultValue=false)]
        public int? OrderNumber { get; set; }
        /// <summary>
        /// model or non model type article images
        /// </summary>
        /// <value>model or non model type article images</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// thumbnail HD url of the article images
        /// </summary>
        /// <value>thumbnail HD url of the article images</value>
        [DataMember(Name="thumbnailHdUrl", EmitDefaultValue=false)]
        public string ThumbnailHdUrl { get; set; }
        /// <summary>
        /// small image of the article
        /// </summary>
        /// <value>small image of the article</value>
        [DataMember(Name="smallUrl", EmitDefaultValue=false)]
        public string SmallUrl { get; set; }
        /// <summary>
        /// small HD image of the article
        /// </summary>
        /// <value>small HD image of the article</value>
        [DataMember(Name="smallHdUrl", EmitDefaultValue=false)]
        public string SmallHdUrl { get; set; }
        /// <summary>
        /// medium image of the article
        /// </summary>
        /// <value>medium image of the article</value>
        [DataMember(Name="mediumUrl", EmitDefaultValue=false)]
        public string MediumUrl { get; set; }
        /// <summary>
        /// medium HD image of the article
        /// </summary>
        /// <value>medium HD image of the article</value>
        [DataMember(Name="mediumHdUrl", EmitDefaultValue=false)]
        public string MediumHdUrl { get; set; }
        /// <summary>
        /// large image of the article
        /// </summary>
        /// <value>large image of the article</value>
        [DataMember(Name="largeUrl", EmitDefaultValue=false)]
        public string LargeUrl { get; set; }
        /// <summary>
        /// large HD image of the article
        /// </summary>
        /// <value>large HD image of the article</value>
        [DataMember(Name="largeHdUrl", EmitDefaultValue=false)]
        public string LargeHdUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArticleImage {\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ThumbnailHdUrl: ").Append(ThumbnailHdUrl).Append("\n");
            sb.Append("  SmallUrl: ").Append(SmallUrl).Append("\n");
            sb.Append("  SmallHdUrl: ").Append(SmallHdUrl).Append("\n");
            sb.Append("  MediumUrl: ").Append(MediumUrl).Append("\n");
            sb.Append("  MediumHdUrl: ").Append(MediumHdUrl).Append("\n");
            sb.Append("  LargeUrl: ").Append(LargeUrl).Append("\n");
            sb.Append("  LargeHdUrl: ").Append(LargeHdUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ArticleImage);
        }

        /// <summary>
        /// Returns true if ArticleImage instances are equal
        /// </summary>
        /// <param name="other">Instance of ArticleImage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticleImage other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OrderNumber == other.OrderNumber ||
                    this.OrderNumber != null &&
                    this.OrderNumber.Equals(other.OrderNumber)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.ThumbnailHdUrl == other.ThumbnailHdUrl ||
                    this.ThumbnailHdUrl != null &&
                    this.ThumbnailHdUrl.Equals(other.ThumbnailHdUrl)
                ) && 
                (
                    this.SmallUrl == other.SmallUrl ||
                    this.SmallUrl != null &&
                    this.SmallUrl.Equals(other.SmallUrl)
                ) && 
                (
                    this.SmallHdUrl == other.SmallHdUrl ||
                    this.SmallHdUrl != null &&
                    this.SmallHdUrl.Equals(other.SmallHdUrl)
                ) && 
                (
                    this.MediumUrl == other.MediumUrl ||
                    this.MediumUrl != null &&
                    this.MediumUrl.Equals(other.MediumUrl)
                ) && 
                (
                    this.MediumHdUrl == other.MediumHdUrl ||
                    this.MediumHdUrl != null &&
                    this.MediumHdUrl.Equals(other.MediumHdUrl)
                ) && 
                (
                    this.LargeUrl == other.LargeUrl ||
                    this.LargeUrl != null &&
                    this.LargeUrl.Equals(other.LargeUrl)
                ) && 
                (
                    this.LargeHdUrl == other.LargeHdUrl ||
                    this.LargeHdUrl != null &&
                    this.LargeHdUrl.Equals(other.LargeHdUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OrderNumber != null)
                    hash = hash * 59 + this.OrderNumber.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.ThumbnailHdUrl != null)
                    hash = hash * 59 + this.ThumbnailHdUrl.GetHashCode();
                if (this.SmallUrl != null)
                    hash = hash * 59 + this.SmallUrl.GetHashCode();
                if (this.SmallHdUrl != null)
                    hash = hash * 59 + this.SmallHdUrl.GetHashCode();
                if (this.MediumUrl != null)
                    hash = hash * 59 + this.MediumUrl.GetHashCode();
                if (this.MediumHdUrl != null)
                    hash = hash * 59 + this.MediumHdUrl.GetHashCode();
                if (this.LargeUrl != null)
                    hash = hash * 59 + this.LargeUrl.GetHashCode();
                if (this.LargeHdUrl != null)
                    hash = hash * 59 + this.LargeHdUrl.GetHashCode();
                return hash;
            }
        }
    }

}
