/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ZalandoApiClient.Model
{
    /// <summary>
    /// Zalando API Filter Schema
    /// </summary>
    [DataContract]
    public partial class Filter :  IEquatable<Filter>
    {
        /// <summary>
        /// filter enum types
        /// </summary>
        /// <value>filter enum types</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum SKU for "SKU"
            /// </summary>
            [EnumMember(Value = "SKU")]
            SKU,
            
            /// <summary>
            /// Enum KEY for "KEY"
            /// </summary>
            [EnumMember(Value = "KEY")]
            KEY,
            
            /// <summary>
            /// Enum ENUM for "ENUM"
            /// </summary>
            [EnumMember(Value = "ENUM")]
            ENUM,
            
            /// <summary>
            /// Enum STRING for "STRING"
            /// </summary>
            [EnumMember(Value = "STRING")]
            STRING,
            
            /// <summary>
            /// Enum RANGE for "RANGE"
            /// </summary>
            [EnumMember(Value = "RANGE")]
            RANGE
        }

        /// <summary>
        /// filter enum types
        /// </summary>
        /// <value>filter enum types</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Filter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Filter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Filter" /> class.
        /// </summary>
        /// <param name="Name">The unique name for a filter (required).</param>
        /// <param name="MultiValue">can this filter be used multiple times with different values in one search request (required).</param>
        /// <param name="Type">filter enum types (required).</param>
        /// <param name="Values">only if type is &#39;enum&#39; this list contains all possible filter values (required).</param>
        public Filter(string Name = null, bool? MultiValue = null, TypeEnum? Type = null, List<FilterValue> Values = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Filter and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "MultiValue" is required (not null)
            if (MultiValue == null)
            {
                throw new InvalidDataException("MultiValue is a required property for Filter and cannot be null");
            }
            else
            {
                this.MultiValue = MultiValue;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for Filter and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "Values" is required (not null)
            if (Values == null)
            {
                throw new InvalidDataException("Values is a required property for Filter and cannot be null");
            }
            else
            {
                this.Values = Values;
            }
        }
        
        /// <summary>
        /// The unique name for a filter
        /// </summary>
        /// <value>The unique name for a filter</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// can this filter be used multiple times with different values in one search request
        /// </summary>
        /// <value>can this filter be used multiple times with different values in one search request</value>
        [DataMember(Name="multiValue", EmitDefaultValue=false)]
        public bool? MultiValue { get; set; }
        /// <summary>
        /// only if type is &#39;enum&#39; this list contains all possible filter values
        /// </summary>
        /// <value>only if type is &#39;enum&#39; this list contains all possible filter values</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<FilterValue> Values { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Filter {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MultiValue: ").Append(MultiValue).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Filter);
        }

        /// <summary>
        /// Returns true if Filter instances are equal
        /// </summary>
        /// <param name="other">Instance of Filter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Filter other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.MultiValue == other.MultiValue ||
                    this.MultiValue != null &&
                    this.MultiValue.Equals(other.MultiValue)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Values == other.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(other.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.MultiValue != null)
                    hash = hash * 59 + this.MultiValue.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Values != null)
                    hash = hash * 59 + this.Values.GetHashCode();
                return hash;
            }
        }
    }

}
