/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ZalandoApiClient.Model
{
    /// <summary>
    /// Zalando API Article Review Schema
    /// </summary>
    [DataContract]
    public partial class ArticleReview :  IEquatable<ArticleReview>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleReview" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ArticleReview() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleReview" /> class.
        /// </summary>
        /// <param name="ReviewId">unique article review id (required).</param>
        /// <param name="ArticleId">ArticleId (required).</param>
        /// <param name="ArticleModelId">ArticleModelId (required).</param>
        /// <param name="CustomerNickname">Customer short name in the article review.</param>
        /// <param name="CustomerCity">customer city in the article review.</param>
        /// <param name="CustomerCountry">customer country in the article review.</param>
        /// <param name="Language">language in the article review (required).</param>
        /// <param name="Title">title in the article review (required).</param>
        /// <param name="Description">description of the article review (required).</param>
        /// <param name="Created">article review created date and time (required).</param>
        /// <param name="Rating">customer rating of the article (required).</param>
        /// <param name="Recommend">customer recommend to the article.</param>
        /// <param name="HelpfulCount">customer review helpful count of the article (required).</param>
        /// <param name="UnhelpfulCount">customer review unhelpful count of the article (required).</param>
        /// <param name="ArticleSizeRatings">ArticleSizeRatings.</param>
        public ArticleReview(string ReviewId = null, string ArticleId = null, string ArticleModelId = null, string CustomerNickname = null, string CustomerCity = null, string CustomerCountry = null, string Language = null, string Title = null, string Description = null, DateTime? Created = null, int? Rating = null, bool? Recommend = null, int? HelpfulCount = null, int? UnhelpfulCount = null, ArticleReviewArticleSizeRatings ArticleSizeRatings = null)
        {
            // to ensure "ReviewId" is required (not null)
            if (ReviewId == null)
            {
                throw new InvalidDataException("ReviewId is a required property for ArticleReview and cannot be null");
            }
            else
            {
                this.ReviewId = ReviewId;
            }
            // to ensure "ArticleId" is required (not null)
            if (ArticleId == null)
            {
                throw new InvalidDataException("ArticleId is a required property for ArticleReview and cannot be null");
            }
            else
            {
                this.ArticleId = ArticleId;
            }
            // to ensure "ArticleModelId" is required (not null)
            if (ArticleModelId == null)
            {
                throw new InvalidDataException("ArticleModelId is a required property for ArticleReview and cannot be null");
            }
            else
            {
                this.ArticleModelId = ArticleModelId;
            }
            // to ensure "Language" is required (not null)
            if (Language == null)
            {
                throw new InvalidDataException("Language is a required property for ArticleReview and cannot be null");
            }
            else
            {
                this.Language = Language;
            }
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for ArticleReview and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for ArticleReview and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "Created" is required (not null)
            if (Created == null)
            {
                throw new InvalidDataException("Created is a required property for ArticleReview and cannot be null");
            }
            else
            {
                this.Created = Created;
            }
            // to ensure "Rating" is required (not null)
            if (Rating == null)
            {
                throw new InvalidDataException("Rating is a required property for ArticleReview and cannot be null");
            }
            else
            {
                this.Rating = Rating;
            }
            // to ensure "HelpfulCount" is required (not null)
            if (HelpfulCount == null)
            {
                throw new InvalidDataException("HelpfulCount is a required property for ArticleReview and cannot be null");
            }
            else
            {
                this.HelpfulCount = HelpfulCount;
            }
            // to ensure "UnhelpfulCount" is required (not null)
            if (UnhelpfulCount == null)
            {
                throw new InvalidDataException("UnhelpfulCount is a required property for ArticleReview and cannot be null");
            }
            else
            {
                this.UnhelpfulCount = UnhelpfulCount;
            }
            this.CustomerNickname = CustomerNickname;
            this.CustomerCity = CustomerCity;
            this.CustomerCountry = CustomerCountry;
            this.Recommend = Recommend;
            this.ArticleSizeRatings = ArticleSizeRatings;
        }
        
        /// <summary>
        /// unique article review id
        /// </summary>
        /// <value>unique article review id</value>
        [DataMember(Name="reviewId", EmitDefaultValue=false)]
        public string ReviewId { get; set; }
        /// <summary>
        /// Gets or Sets ArticleId
        /// </summary>
        [DataMember(Name="articleId", EmitDefaultValue=false)]
        public string ArticleId { get; set; }
        /// <summary>
        /// Gets or Sets ArticleModelId
        /// </summary>
        [DataMember(Name="articleModelId", EmitDefaultValue=false)]
        public string ArticleModelId { get; set; }
        /// <summary>
        /// Customer short name in the article review
        /// </summary>
        /// <value>Customer short name in the article review</value>
        [DataMember(Name="customerNickname", EmitDefaultValue=false)]
        public string CustomerNickname { get; set; }
        /// <summary>
        /// customer city in the article review
        /// </summary>
        /// <value>customer city in the article review</value>
        [DataMember(Name="customerCity", EmitDefaultValue=false)]
        public string CustomerCity { get; set; }
        /// <summary>
        /// customer country in the article review
        /// </summary>
        /// <value>customer country in the article review</value>
        [DataMember(Name="customerCountry", EmitDefaultValue=false)]
        public string CustomerCountry { get; set; }
        /// <summary>
        /// language in the article review
        /// </summary>
        /// <value>language in the article review</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }
        /// <summary>
        /// title in the article review
        /// </summary>
        /// <value>title in the article review</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// description of the article review
        /// </summary>
        /// <value>description of the article review</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// article review created date and time
        /// </summary>
        /// <value>article review created date and time</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// customer rating of the article
        /// </summary>
        /// <value>customer rating of the article</value>
        [DataMember(Name="rating", EmitDefaultValue=false)]
        public int? Rating { get; set; }
        /// <summary>
        /// customer recommend to the article
        /// </summary>
        /// <value>customer recommend to the article</value>
        [DataMember(Name="recommend", EmitDefaultValue=false)]
        public bool? Recommend { get; set; }
        /// <summary>
        /// customer review helpful count of the article
        /// </summary>
        /// <value>customer review helpful count of the article</value>
        [DataMember(Name="helpfulCount", EmitDefaultValue=false)]
        public int? HelpfulCount { get; set; }
        /// <summary>
        /// customer review unhelpful count of the article
        /// </summary>
        /// <value>customer review unhelpful count of the article</value>
        [DataMember(Name="unhelpfulCount", EmitDefaultValue=false)]
        public int? UnhelpfulCount { get; set; }
        /// <summary>
        /// Gets or Sets ArticleSizeRatings
        /// </summary>
        [DataMember(Name="articleSizeRatings", EmitDefaultValue=false)]
        public ArticleReviewArticleSizeRatings ArticleSizeRatings { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArticleReview {\n");
            sb.Append("  ReviewId: ").Append(ReviewId).Append("\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  ArticleModelId: ").Append(ArticleModelId).Append("\n");
            sb.Append("  CustomerNickname: ").Append(CustomerNickname).Append("\n");
            sb.Append("  CustomerCity: ").Append(CustomerCity).Append("\n");
            sb.Append("  CustomerCountry: ").Append(CustomerCountry).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Recommend: ").Append(Recommend).Append("\n");
            sb.Append("  HelpfulCount: ").Append(HelpfulCount).Append("\n");
            sb.Append("  UnhelpfulCount: ").Append(UnhelpfulCount).Append("\n");
            sb.Append("  ArticleSizeRatings: ").Append(ArticleSizeRatings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ArticleReview);
        }

        /// <summary>
        /// Returns true if ArticleReview instances are equal
        /// </summary>
        /// <param name="other">Instance of ArticleReview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticleReview other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ReviewId == other.ReviewId ||
                    this.ReviewId != null &&
                    this.ReviewId.Equals(other.ReviewId)
                ) && 
                (
                    this.ArticleId == other.ArticleId ||
                    this.ArticleId != null &&
                    this.ArticleId.Equals(other.ArticleId)
                ) && 
                (
                    this.ArticleModelId == other.ArticleModelId ||
                    this.ArticleModelId != null &&
                    this.ArticleModelId.Equals(other.ArticleModelId)
                ) && 
                (
                    this.CustomerNickname == other.CustomerNickname ||
                    this.CustomerNickname != null &&
                    this.CustomerNickname.Equals(other.CustomerNickname)
                ) && 
                (
                    this.CustomerCity == other.CustomerCity ||
                    this.CustomerCity != null &&
                    this.CustomerCity.Equals(other.CustomerCity)
                ) && 
                (
                    this.CustomerCountry == other.CustomerCountry ||
                    this.CustomerCountry != null &&
                    this.CustomerCountry.Equals(other.CustomerCountry)
                ) && 
                (
                    this.Language == other.Language ||
                    this.Language != null &&
                    this.Language.Equals(other.Language)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Rating == other.Rating ||
                    this.Rating != null &&
                    this.Rating.Equals(other.Rating)
                ) && 
                (
                    this.Recommend == other.Recommend ||
                    this.Recommend != null &&
                    this.Recommend.Equals(other.Recommend)
                ) && 
                (
                    this.HelpfulCount == other.HelpfulCount ||
                    this.HelpfulCount != null &&
                    this.HelpfulCount.Equals(other.HelpfulCount)
                ) && 
                (
                    this.UnhelpfulCount == other.UnhelpfulCount ||
                    this.UnhelpfulCount != null &&
                    this.UnhelpfulCount.Equals(other.UnhelpfulCount)
                ) && 
                (
                    this.ArticleSizeRatings == other.ArticleSizeRatings ||
                    this.ArticleSizeRatings != null &&
                    this.ArticleSizeRatings.Equals(other.ArticleSizeRatings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ReviewId != null)
                    hash = hash * 59 + this.ReviewId.GetHashCode();
                if (this.ArticleId != null)
                    hash = hash * 59 + this.ArticleId.GetHashCode();
                if (this.ArticleModelId != null)
                    hash = hash * 59 + this.ArticleModelId.GetHashCode();
                if (this.CustomerNickname != null)
                    hash = hash * 59 + this.CustomerNickname.GetHashCode();
                if (this.CustomerCity != null)
                    hash = hash * 59 + this.CustomerCity.GetHashCode();
                if (this.CustomerCountry != null)
                    hash = hash * 59 + this.CustomerCountry.GetHashCode();
                if (this.Language != null)
                    hash = hash * 59 + this.Language.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Rating != null)
                    hash = hash * 59 + this.Rating.GetHashCode();
                if (this.Recommend != null)
                    hash = hash * 59 + this.Recommend.GetHashCode();
                if (this.HelpfulCount != null)
                    hash = hash * 59 + this.HelpfulCount.GetHashCode();
                if (this.UnhelpfulCount != null)
                    hash = hash * 59 + this.UnhelpfulCount.GetHashCode();
                if (this.ArticleSizeRatings != null)
                    hash = hash * 59 + this.ArticleSizeRatings.GetHashCode();
                return hash;
            }
        }
    }

}
