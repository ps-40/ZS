/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ZalandoApiClient.Model
{
    /// <summary>
    /// Zalando API Category Schema
    /// </summary>
    [DataContract]
    public partial class Category :  IEquatable<Category>
    {
        /// <summary>
        /// The target group of the articles from this category
        /// </summary>
        /// <value>The target group of the articles from this category</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TargetGroupEnum
        {
            
            /// <summary>
            /// Enum ALL for "ALL"
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL,
            
            /// <summary>
            /// Enum WOMEN for "WOMEN"
            /// </summary>
            [EnumMember(Value = "WOMEN")]
            WOMEN,
            
            /// <summary>
            /// Enum MEN for "MEN"
            /// </summary>
            [EnumMember(Value = "MEN")]
            MEN,
            
            /// <summary>
            /// Enum KIDS for "KIDS"
            /// </summary>
            [EnumMember(Value = "KIDS")]
            KIDS
        }

        /// <summary>
        /// The target group of the articles from this category
        /// </summary>
        /// <value>The target group of the articles from this category</value>
        [DataMember(Name="targetGroup", EmitDefaultValue=false)]
        public TargetGroupEnum? TargetGroup { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Category() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        /// <param name="Key">The unique key for a category (required).</param>
        /// <param name="Name">Name of the category (required).</param>
        /// <param name="ParentKey">The key of the parent category.</param>
        /// <param name="ChildKeys">The list of keys of the child categories (required).</param>
        /// <param name="Type">The type of the category..</param>
        /// <param name="Outlet">Containing articles are from last seasons.</param>
        /// <param name="Hidden">The category is hidden and not shown on the Zalando web shop.</param>
        /// <param name="TargetGroup">The target group of the articles from this category (required).</param>
        /// <param name="SuggestedFilters">list of filter names that are reasonable to use within this category (required).</param>
        public Category(string Key = null, string Name = null, string ParentKey = null, List<string> ChildKeys = null, string Type = null, bool? Outlet = null, bool? Hidden = null, TargetGroupEnum? TargetGroup = null, List<string> SuggestedFilters = null)
        {
            // to ensure "Key" is required (not null)
            if (Key == null)
            {
                throw new InvalidDataException("Key is a required property for Category and cannot be null");
            }
            else
            {
                this.Key = Key;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Category and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "ChildKeys" is required (not null)
            if (ChildKeys == null)
            {
                throw new InvalidDataException("ChildKeys is a required property for Category and cannot be null");
            }
            else
            {
                this.ChildKeys = ChildKeys;
            }
            // to ensure "TargetGroup" is required (not null)
            if (TargetGroup == null)
            {
                throw new InvalidDataException("TargetGroup is a required property for Category and cannot be null");
            }
            else
            {
                this.TargetGroup = TargetGroup;
            }
            // to ensure "SuggestedFilters" is required (not null)
            if (SuggestedFilters == null)
            {
                throw new InvalidDataException("SuggestedFilters is a required property for Category and cannot be null");
            }
            else
            {
                this.SuggestedFilters = SuggestedFilters;
            }
            this.ParentKey = ParentKey;
            this.Type = Type;
            this.Outlet = Outlet;
            this.Hidden = Hidden;
        }
        
        /// <summary>
        /// The unique key for a category
        /// </summary>
        /// <value>The unique key for a category</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// Name of the category
        /// </summary>
        /// <value>Name of the category</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The key of the parent category
        /// </summary>
        /// <value>The key of the parent category</value>
        [DataMember(Name="parentKey", EmitDefaultValue=false)]
        public string ParentKey { get; set; }
        /// <summary>
        /// The list of keys of the child categories
        /// </summary>
        /// <value>The list of keys of the child categories</value>
        [DataMember(Name="childKeys", EmitDefaultValue=false)]
        public List<string> ChildKeys { get; set; }
        /// <summary>
        /// The type of the category.
        /// </summary>
        /// <value>The type of the category.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Containing articles are from last seasons
        /// </summary>
        /// <value>Containing articles are from last seasons</value>
        [DataMember(Name="outlet", EmitDefaultValue=false)]
        public bool? Outlet { get; set; }
        /// <summary>
        /// The category is hidden and not shown on the Zalando web shop
        /// </summary>
        /// <value>The category is hidden and not shown on the Zalando web shop</value>
        [DataMember(Name="hidden", EmitDefaultValue=false)]
        public bool? Hidden { get; set; }
        /// <summary>
        /// list of filter names that are reasonable to use within this category
        /// </summary>
        /// <value>list of filter names that are reasonable to use within this category</value>
        [DataMember(Name="suggestedFilters", EmitDefaultValue=false)]
        public List<string> SuggestedFilters { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Category {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentKey: ").Append(ParentKey).Append("\n");
            sb.Append("  ChildKeys: ").Append(ChildKeys).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Outlet: ").Append(Outlet).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  TargetGroup: ").Append(TargetGroup).Append("\n");
            sb.Append("  SuggestedFilters: ").Append(SuggestedFilters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Category);
        }

        /// <summary>
        /// Returns true if Category instances are equal
        /// </summary>
        /// <param name="other">Instance of Category to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Category other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ParentKey == other.ParentKey ||
                    this.ParentKey != null &&
                    this.ParentKey.Equals(other.ParentKey)
                ) && 
                (
                    this.ChildKeys == other.ChildKeys ||
                    this.ChildKeys != null &&
                    this.ChildKeys.SequenceEqual(other.ChildKeys)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Outlet == other.Outlet ||
                    this.Outlet != null &&
                    this.Outlet.Equals(other.Outlet)
                ) && 
                (
                    this.Hidden == other.Hidden ||
                    this.Hidden != null &&
                    this.Hidden.Equals(other.Hidden)
                ) && 
                (
                    this.TargetGroup == other.TargetGroup ||
                    this.TargetGroup != null &&
                    this.TargetGroup.Equals(other.TargetGroup)
                ) && 
                (
                    this.SuggestedFilters == other.SuggestedFilters ||
                    this.SuggestedFilters != null &&
                    this.SuggestedFilters.SequenceEqual(other.SuggestedFilters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ParentKey != null)
                    hash = hash * 59 + this.ParentKey.GetHashCode();
                if (this.ChildKeys != null)
                    hash = hash * 59 + this.ChildKeys.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Outlet != null)
                    hash = hash * 59 + this.Outlet.GetHashCode();
                if (this.Hidden != null)
                    hash = hash * 59 + this.Hidden.GetHashCode();
                if (this.TargetGroup != null)
                    hash = hash * 59 + this.TargetGroup.GetHashCode();
                if (this.SuggestedFilters != null)
                    hash = hash * 59 + this.SuggestedFilters.GetHashCode();
                return hash;
            }
        }
    }

}
