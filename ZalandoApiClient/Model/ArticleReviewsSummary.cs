/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ZalandoApiClient.Model
{
    /// <summary>
    /// Zalando API Article Reviews Summary Schema
    /// </summary>
    [DataContract]
    public partial class ArticleReviewsSummary :  IEquatable<ArticleReviewsSummary>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleReviewsSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ArticleReviewsSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleReviewsSummary" /> class.
        /// </summary>
        /// <param name="ArticleModelId">ArticleModelId (required).</param>
        /// <param name="AverageStarRating">average star rating of the article (required).</param>
        /// <param name="NumberOfUserReviews">number of user reviews of the article (required).</param>
        /// <param name="NumberOfUserRecommendations">number of users recommended to the article (required).</param>
        /// <param name="NumberOfUserPositiveRecommendations">number of positive recommendations to the article (required).</param>
        /// <param name="StarRatingDistribution">StarRatingDistribution.</param>
        /// <param name="ArticleSizeRatings">ArticleSizeRatings.</param>
        public ArticleReviewsSummary(string ArticleModelId = null, decimal? AverageStarRating = null, int? NumberOfUserReviews = null, int? NumberOfUserRecommendations = null, int? NumberOfUserPositiveRecommendations = null, ArticleReviewsSummaryStarRatingDistribution StarRatingDistribution = null, ArticleReviewsSummaryArticleSizeRatings ArticleSizeRatings = null)
        {
            // to ensure "ArticleModelId" is required (not null)
            if (ArticleModelId == null)
            {
                throw new InvalidDataException("ArticleModelId is a required property for ArticleReviewsSummary and cannot be null");
            }
            else
            {
                this.ArticleModelId = ArticleModelId;
            }
            // to ensure "AverageStarRating" is required (not null)
            if (AverageStarRating == null)
            {
                throw new InvalidDataException("AverageStarRating is a required property for ArticleReviewsSummary and cannot be null");
            }
            else
            {
                this.AverageStarRating = AverageStarRating;
            }
            // to ensure "NumberOfUserReviews" is required (not null)
            if (NumberOfUserReviews == null)
            {
                throw new InvalidDataException("NumberOfUserReviews is a required property for ArticleReviewsSummary and cannot be null");
            }
            else
            {
                this.NumberOfUserReviews = NumberOfUserReviews;
            }
            // to ensure "NumberOfUserRecommendations" is required (not null)
            if (NumberOfUserRecommendations == null)
            {
                throw new InvalidDataException("NumberOfUserRecommendations is a required property for ArticleReviewsSummary and cannot be null");
            }
            else
            {
                this.NumberOfUserRecommendations = NumberOfUserRecommendations;
            }
            // to ensure "NumberOfUserPositiveRecommendations" is required (not null)
            if (NumberOfUserPositiveRecommendations == null)
            {
                throw new InvalidDataException("NumberOfUserPositiveRecommendations is a required property for ArticleReviewsSummary and cannot be null");
            }
            else
            {
                this.NumberOfUserPositiveRecommendations = NumberOfUserPositiveRecommendations;
            }
            this.StarRatingDistribution = StarRatingDistribution;
            this.ArticleSizeRatings = ArticleSizeRatings;
        }
        
        /// <summary>
        /// Gets or Sets ArticleModelId
        /// </summary>
        [DataMember(Name="articleModelId", EmitDefaultValue=false)]
        public string ArticleModelId { get; set; }
        /// <summary>
        /// average star rating of the article
        /// </summary>
        /// <value>average star rating of the article</value>
        [DataMember(Name="averageStarRating", EmitDefaultValue=false)]
        public decimal? AverageStarRating { get; set; }
        /// <summary>
        /// number of user reviews of the article
        /// </summary>
        /// <value>number of user reviews of the article</value>
        [DataMember(Name="numberOfUserReviews", EmitDefaultValue=false)]
        public int? NumberOfUserReviews { get; set; }
        /// <summary>
        /// number of users recommended to the article
        /// </summary>
        /// <value>number of users recommended to the article</value>
        [DataMember(Name="numberOfUserRecommendations", EmitDefaultValue=false)]
        public int? NumberOfUserRecommendations { get; set; }
        /// <summary>
        /// number of positive recommendations to the article
        /// </summary>
        /// <value>number of positive recommendations to the article</value>
        [DataMember(Name="numberOfUserPositiveRecommendations", EmitDefaultValue=false)]
        public int? NumberOfUserPositiveRecommendations { get; set; }
        /// <summary>
        /// Gets or Sets StarRatingDistribution
        /// </summary>
        [DataMember(Name="starRatingDistribution", EmitDefaultValue=false)]
        public ArticleReviewsSummaryStarRatingDistribution StarRatingDistribution { get; set; }
        /// <summary>
        /// Gets or Sets ArticleSizeRatings
        /// </summary>
        [DataMember(Name="articleSizeRatings", EmitDefaultValue=false)]
        public ArticleReviewsSummaryArticleSizeRatings ArticleSizeRatings { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArticleReviewsSummary {\n");
            sb.Append("  ArticleModelId: ").Append(ArticleModelId).Append("\n");
            sb.Append("  AverageStarRating: ").Append(AverageStarRating).Append("\n");
            sb.Append("  NumberOfUserReviews: ").Append(NumberOfUserReviews).Append("\n");
            sb.Append("  NumberOfUserRecommendations: ").Append(NumberOfUserRecommendations).Append("\n");
            sb.Append("  NumberOfUserPositiveRecommendations: ").Append(NumberOfUserPositiveRecommendations).Append("\n");
            sb.Append("  StarRatingDistribution: ").Append(StarRatingDistribution).Append("\n");
            sb.Append("  ArticleSizeRatings: ").Append(ArticleSizeRatings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ArticleReviewsSummary);
        }

        /// <summary>
        /// Returns true if ArticleReviewsSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of ArticleReviewsSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticleReviewsSummary other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ArticleModelId == other.ArticleModelId ||
                    this.ArticleModelId != null &&
                    this.ArticleModelId.Equals(other.ArticleModelId)
                ) && 
                (
                    this.AverageStarRating == other.AverageStarRating ||
                    this.AverageStarRating != null &&
                    this.AverageStarRating.Equals(other.AverageStarRating)
                ) && 
                (
                    this.NumberOfUserReviews == other.NumberOfUserReviews ||
                    this.NumberOfUserReviews != null &&
                    this.NumberOfUserReviews.Equals(other.NumberOfUserReviews)
                ) && 
                (
                    this.NumberOfUserRecommendations == other.NumberOfUserRecommendations ||
                    this.NumberOfUserRecommendations != null &&
                    this.NumberOfUserRecommendations.Equals(other.NumberOfUserRecommendations)
                ) && 
                (
                    this.NumberOfUserPositiveRecommendations == other.NumberOfUserPositiveRecommendations ||
                    this.NumberOfUserPositiveRecommendations != null &&
                    this.NumberOfUserPositiveRecommendations.Equals(other.NumberOfUserPositiveRecommendations)
                ) && 
                (
                    this.StarRatingDistribution == other.StarRatingDistribution ||
                    this.StarRatingDistribution != null &&
                    this.StarRatingDistribution.Equals(other.StarRatingDistribution)
                ) && 
                (
                    this.ArticleSizeRatings == other.ArticleSizeRatings ||
                    this.ArticleSizeRatings != null &&
                    this.ArticleSizeRatings.Equals(other.ArticleSizeRatings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ArticleModelId != null)
                    hash = hash * 59 + this.ArticleModelId.GetHashCode();
                if (this.AverageStarRating != null)
                    hash = hash * 59 + this.AverageStarRating.GetHashCode();
                if (this.NumberOfUserReviews != null)
                    hash = hash * 59 + this.NumberOfUserReviews.GetHashCode();
                if (this.NumberOfUserRecommendations != null)
                    hash = hash * 59 + this.NumberOfUserRecommendations.GetHashCode();
                if (this.NumberOfUserPositiveRecommendations != null)
                    hash = hash * 59 + this.NumberOfUserPositiveRecommendations.GetHashCode();
                if (this.StarRatingDistribution != null)
                    hash = hash * 59 + this.StarRatingDistribution.GetHashCode();
                if (this.ArticleSizeRatings != null)
                    hash = hash * 59 + this.ArticleSizeRatings.GetHashCode();
                return hash;
            }
        }
    }

}
