/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ZalandoApiClient.Model
{
    /// <summary>
    /// Zalando API Article Unit Schema
    /// </summary>
    [DataContract]
    public partial class ArticleUnit :  IEquatable<ArticleUnit>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleUnit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ArticleUnit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleUnit" /> class.
        /// </summary>
        /// <param name="Id">article id (sku) (required).</param>
        /// <param name="Size">article size (required).</param>
        /// <param name="Price">Price (required).</param>
        /// <param name="OriginalPrice">OriginalPrice (required).</param>
        /// <param name="Available">availability of the article (required).</param>
        /// <param name="Stock">stock of the article (required).</param>
        /// <param name="PartnerId">partner id (vendor id) of the article.</param>
        public ArticleUnit(string Id = null, string Size = null, ArticlePrice Price = null, ArticlePrice OriginalPrice = null, bool? Available = null, int? Stock = null, string PartnerId = null)
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for ArticleUnit and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Size" is required (not null)
            if (Size == null)
            {
                throw new InvalidDataException("Size is a required property for ArticleUnit and cannot be null");
            }
            else
            {
                this.Size = Size;
            }
            // to ensure "Price" is required (not null)
            if (Price == null)
            {
                throw new InvalidDataException("Price is a required property for ArticleUnit and cannot be null");
            }
            else
            {
                this.Price = Price;
            }
            // to ensure "OriginalPrice" is required (not null)
            if (OriginalPrice == null)
            {
                throw new InvalidDataException("OriginalPrice is a required property for ArticleUnit and cannot be null");
            }
            else
            {
                this.OriginalPrice = OriginalPrice;
            }
            // to ensure "Available" is required (not null)
            if (Available == null)
            {
                throw new InvalidDataException("Available is a required property for ArticleUnit and cannot be null");
            }
            else
            {
                this.Available = Available;
            }
            // to ensure "Stock" is required (not null)
            if (Stock == null)
            {
                throw new InvalidDataException("Stock is a required property for ArticleUnit and cannot be null");
            }
            else
            {
                this.Stock = Stock;
            }
            this.PartnerId = PartnerId;
        }
        
        /// <summary>
        /// article id (sku)
        /// </summary>
        /// <value>article id (sku)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// article size
        /// </summary>
        /// <value>article size</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public string Size { get; set; }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public ArticlePrice Price { get; set; }
        /// <summary>
        /// Gets or Sets OriginalPrice
        /// </summary>
        [DataMember(Name="originalPrice", EmitDefaultValue=false)]
        public ArticlePrice OriginalPrice { get; set; }
        /// <summary>
        /// availability of the article
        /// </summary>
        /// <value>availability of the article</value>
        [DataMember(Name="available", EmitDefaultValue=false)]
        public bool? Available { get; set; }
        /// <summary>
        /// stock of the article
        /// </summary>
        /// <value>stock of the article</value>
        [DataMember(Name="stock", EmitDefaultValue=false)]
        public int? Stock { get; set; }
        /// <summary>
        /// partner id (vendor id) of the article
        /// </summary>
        /// <value>partner id (vendor id) of the article</value>
        [DataMember(Name="partnerId", EmitDefaultValue=false)]
        public string PartnerId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArticleUnit {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  OriginalPrice: ").Append(OriginalPrice).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ArticleUnit);
        }

        /// <summary>
        /// Returns true if ArticleUnit instances are equal
        /// </summary>
        /// <param name="other">Instance of ArticleUnit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticleUnit other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Size == other.Size ||
                    this.Size != null &&
                    this.Size.Equals(other.Size)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.OriginalPrice == other.OriginalPrice ||
                    this.OriginalPrice != null &&
                    this.OriginalPrice.Equals(other.OriginalPrice)
                ) && 
                (
                    this.Available == other.Available ||
                    this.Available != null &&
                    this.Available.Equals(other.Available)
                ) && 
                (
                    this.Stock == other.Stock ||
                    this.Stock != null &&
                    this.Stock.Equals(other.Stock)
                ) && 
                (
                    this.PartnerId == other.PartnerId ||
                    this.PartnerId != null &&
                    this.PartnerId.Equals(other.PartnerId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Size != null)
                    hash = hash * 59 + this.Size.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.OriginalPrice != null)
                    hash = hash * 59 + this.OriginalPrice.GetHashCode();
                if (this.Available != null)
                    hash = hash * 59 + this.Available.GetHashCode();
                if (this.Stock != null)
                    hash = hash * 59 + this.Stock.GetHashCode();
                if (this.PartnerId != null)
                    hash = hash * 59 + this.PartnerId.GetHashCode();
                return hash;
            }
        }
    }

}
