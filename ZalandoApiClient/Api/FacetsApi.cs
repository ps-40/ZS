/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ZalandoApiClient.Client;
using ZalandoApiClient.Model;

namespace ZalandoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFacetsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Shop Facets
        /// </summary>
        /// <remarks>
        /// Zalando API Facets Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Facets</returns>
        Facets FacetsGet (List<string> ageGroup = null, List<string> articleId = null, List<string> activationDate = null, List<string> articleModelId = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Shop Facets
        /// </summary>
        /// <remarks>
        /// Zalando API Facets Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of Facets</returns>
        ApiResponse<Facets> FacetsGetWithHttpInfo (List<string> ageGroup = null, List<string> articleId = null, List<string> activationDate = null, List<string> articleModelId = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string acceptLanguage = null, List<string> fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Shop Facets
        /// </summary>
        /// <remarks>
        /// Zalando API Facets Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of Facets</returns>
        System.Threading.Tasks.Task<Facets> FacetsGetAsync (List<string> ageGroup = null, List<string> articleId = null, List<string> activationDate = null, List<string> articleModelId = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Shop Facets
        /// </summary>
        /// <remarks>
        /// Zalando API Facets Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (Facets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Facets>> FacetsGetAsyncWithHttpInfo (List<string> ageGroup = null, List<string> articleId = null, List<string> activationDate = null, List<string> articleModelId = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string acceptLanguage = null, List<string> fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FacetsApi : IFacetsApi
    {
        private ZalandoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FacetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FacetsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = ZalandoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FacetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FacetsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ZalandoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ZalandoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Shop Facets Zalando API Facets Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Facets</returns>
        public Facets FacetsGet (List<string> ageGroup = null, List<string> articleId = null, List<string> activationDate = null, List<string> articleModelId = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<Facets> localVarResponse = FacetsGetWithHttpInfo(ageGroup, articleId, activationDate, articleModelId, assortmentArea, brand, brandfamily, category, color, den, filling, gender, heelForm, heelHeight, length, occasion, pattern, price, sale, season, shaftHeight, shaftWidth, shirtCollar, shoeFastener, shoeToecap, shopArea, size, sports, technology, trouserRise, upperMaterial, volume, acceptLanguage, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Shop Facets Zalando API Facets Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of Facets</returns>
        public ApiResponse< Facets > FacetsGetWithHttpInfo (List<string> ageGroup = null, List<string> articleId = null, List<string> activationDate = null, List<string> articleModelId = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string acceptLanguage = null, List<string> fields = null)
        {

            var localVarPath = "/facets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ageGroup != null) localVarQueryParams.Add("ageGroup", Configuration.ApiClient.ParameterToString(ageGroup)); // query parameter
            if (articleId != null) localVarQueryParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // query parameter
            if (activationDate != null) localVarQueryParams.Add("activationDate", Configuration.ApiClient.ParameterToString(activationDate)); // query parameter
            if (articleModelId != null) localVarQueryParams.Add("articleModelId", Configuration.ApiClient.ParameterToString(articleModelId)); // query parameter
            if (assortmentArea != null) localVarQueryParams.Add("assortmentArea", Configuration.ApiClient.ParameterToString(assortmentArea)); // query parameter
            if (brand != null) localVarQueryParams.Add("brand", Configuration.ApiClient.ParameterToString(brand)); // query parameter
            if (brandfamily != null) localVarQueryParams.Add("brandfamily", Configuration.ApiClient.ParameterToString(brandfamily)); // query parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter
            if (color != null) localVarQueryParams.Add("color", Configuration.ApiClient.ParameterToString(color)); // query parameter
            if (den != null) localVarQueryParams.Add("den", Configuration.ApiClient.ParameterToString(den)); // query parameter
            if (filling != null) localVarQueryParams.Add("filling", Configuration.ApiClient.ParameterToString(filling)); // query parameter
            if (gender != null) localVarQueryParams.Add("gender", Configuration.ApiClient.ParameterToString(gender)); // query parameter
            if (heelForm != null) localVarQueryParams.Add("heelForm", Configuration.ApiClient.ParameterToString(heelForm)); // query parameter
            if (heelHeight != null) localVarQueryParams.Add("heelHeight", Configuration.ApiClient.ParameterToString(heelHeight)); // query parameter
            if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
            if (occasion != null) localVarQueryParams.Add("occasion", Configuration.ApiClient.ParameterToString(occasion)); // query parameter
            if (pattern != null) localVarQueryParams.Add("pattern", Configuration.ApiClient.ParameterToString(pattern)); // query parameter
            if (price != null) localVarQueryParams.Add("price", Configuration.ApiClient.ParameterToString(price)); // query parameter
            if (sale != null) localVarQueryParams.Add("sale", Configuration.ApiClient.ParameterToString(sale)); // query parameter
            if (season != null) localVarQueryParams.Add("season", Configuration.ApiClient.ParameterToString(season)); // query parameter
            if (shaftHeight != null) localVarQueryParams.Add("shaftHeight", Configuration.ApiClient.ParameterToString(shaftHeight)); // query parameter
            if (shaftWidth != null) localVarQueryParams.Add("shaftWidth", Configuration.ApiClient.ParameterToString(shaftWidth)); // query parameter
            if (shirtCollar != null) localVarQueryParams.Add("shirtCollar", Configuration.ApiClient.ParameterToString(shirtCollar)); // query parameter
            if (shoeFastener != null) localVarQueryParams.Add("shoeFastener", Configuration.ApiClient.ParameterToString(shoeFastener)); // query parameter
            if (shoeToecap != null) localVarQueryParams.Add("shoeToecap", Configuration.ApiClient.ParameterToString(shoeToecap)); // query parameter
            if (shopArea != null) localVarQueryParams.Add("shopArea", Configuration.ApiClient.ParameterToString(shopArea)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (sports != null) localVarQueryParams.Add("sports", Configuration.ApiClient.ParameterToString(sports)); // query parameter
            if (technology != null) localVarQueryParams.Add("technology", Configuration.ApiClient.ParameterToString(technology)); // query parameter
            if (trouserRise != null) localVarQueryParams.Add("trouserRise", Configuration.ApiClient.ParameterToString(trouserRise)); // query parameter
            if (upperMaterial != null) localVarQueryParams.Add("upperMaterial", Configuration.ApiClient.ParameterToString(upperMaterial)); // query parameter
            if (volume != null) localVarQueryParams.Add("volume", Configuration.ApiClient.ParameterToString(volume)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FacetsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Facets>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Facets) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Facets)));
            
        }

        /// <summary>
        /// Shop Facets Zalando API Facets Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of Facets</returns>
        public async System.Threading.Tasks.Task<Facets> FacetsGetAsync (List<string> ageGroup = null, List<string> articleId = null, List<string> activationDate = null, List<string> articleModelId = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<Facets> localVarResponse = await FacetsGetAsyncWithHttpInfo(ageGroup, articleId, activationDate, articleModelId, assortmentArea, brand, brandfamily, category, color, den, filling, gender, heelForm, heelHeight, length, occasion, pattern, price, sale, season, shaftHeight, shaftWidth, shirtCollar, shoeFastener, shoeToecap, shopArea, size, sports, technology, trouserRise, upperMaterial, volume, acceptLanguage, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Shop Facets Zalando API Facets Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (Facets)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Facets>> FacetsGetAsyncWithHttpInfo (List<string> ageGroup = null, List<string> articleId = null, List<string> activationDate = null, List<string> articleModelId = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string acceptLanguage = null, List<string> fields = null)
        {

            var localVarPath = "/facets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ageGroup != null) localVarQueryParams.Add("ageGroup", Configuration.ApiClient.ParameterToString(ageGroup)); // query parameter
            if (articleId != null) localVarQueryParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // query parameter
            if (activationDate != null) localVarQueryParams.Add("activationDate", Configuration.ApiClient.ParameterToString(activationDate)); // query parameter
            if (articleModelId != null) localVarQueryParams.Add("articleModelId", Configuration.ApiClient.ParameterToString(articleModelId)); // query parameter
            if (assortmentArea != null) localVarQueryParams.Add("assortmentArea", Configuration.ApiClient.ParameterToString(assortmentArea)); // query parameter
            if (brand != null) localVarQueryParams.Add("brand", Configuration.ApiClient.ParameterToString(brand)); // query parameter
            if (brandfamily != null) localVarQueryParams.Add("brandfamily", Configuration.ApiClient.ParameterToString(brandfamily)); // query parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter
            if (color != null) localVarQueryParams.Add("color", Configuration.ApiClient.ParameterToString(color)); // query parameter
            if (den != null) localVarQueryParams.Add("den", Configuration.ApiClient.ParameterToString(den)); // query parameter
            if (filling != null) localVarQueryParams.Add("filling", Configuration.ApiClient.ParameterToString(filling)); // query parameter
            if (gender != null) localVarQueryParams.Add("gender", Configuration.ApiClient.ParameterToString(gender)); // query parameter
            if (heelForm != null) localVarQueryParams.Add("heelForm", Configuration.ApiClient.ParameterToString(heelForm)); // query parameter
            if (heelHeight != null) localVarQueryParams.Add("heelHeight", Configuration.ApiClient.ParameterToString(heelHeight)); // query parameter
            if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
            if (occasion != null) localVarQueryParams.Add("occasion", Configuration.ApiClient.ParameterToString(occasion)); // query parameter
            if (pattern != null) localVarQueryParams.Add("pattern", Configuration.ApiClient.ParameterToString(pattern)); // query parameter
            if (price != null) localVarQueryParams.Add("price", Configuration.ApiClient.ParameterToString(price)); // query parameter
            if (sale != null) localVarQueryParams.Add("sale", Configuration.ApiClient.ParameterToString(sale)); // query parameter
            if (season != null) localVarQueryParams.Add("season", Configuration.ApiClient.ParameterToString(season)); // query parameter
            if (shaftHeight != null) localVarQueryParams.Add("shaftHeight", Configuration.ApiClient.ParameterToString(shaftHeight)); // query parameter
            if (shaftWidth != null) localVarQueryParams.Add("shaftWidth", Configuration.ApiClient.ParameterToString(shaftWidth)); // query parameter
            if (shirtCollar != null) localVarQueryParams.Add("shirtCollar", Configuration.ApiClient.ParameterToString(shirtCollar)); // query parameter
            if (shoeFastener != null) localVarQueryParams.Add("shoeFastener", Configuration.ApiClient.ParameterToString(shoeFastener)); // query parameter
            if (shoeToecap != null) localVarQueryParams.Add("shoeToecap", Configuration.ApiClient.ParameterToString(shoeToecap)); // query parameter
            if (shopArea != null) localVarQueryParams.Add("shopArea", Configuration.ApiClient.ParameterToString(shopArea)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (sports != null) localVarQueryParams.Add("sports", Configuration.ApiClient.ParameterToString(sports)); // query parameter
            if (technology != null) localVarQueryParams.Add("technology", Configuration.ApiClient.ParameterToString(technology)); // query parameter
            if (trouserRise != null) localVarQueryParams.Add("trouserRise", Configuration.ApiClient.ParameterToString(trouserRise)); // query parameter
            if (upperMaterial != null) localVarQueryParams.Add("upperMaterial", Configuration.ApiClient.ParameterToString(upperMaterial)); // query parameter
            if (volume != null) localVarQueryParams.Add("volume", Configuration.ApiClient.ParameterToString(volume)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FacetsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Facets>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Facets) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Facets)));
            
        }

    }
}
