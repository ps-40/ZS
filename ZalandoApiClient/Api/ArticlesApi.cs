/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ZalandoApiClient.Client;
using ZalandoApiClient.Model;

namespace ZalandoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArticlesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Article Reviews
        /// </summary>
        /// <remarks>
        /// Zalando API Article Reviews Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique article reviews. (optional)</param>
        /// <param name="articleId">To articles reviews. (optional)</param>
        /// <param name="articleModelId">To get article model ids reviews. (optional)</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleReviews</returns>
        ArticleReviews ArticleReviewsGet (List<string> reviewId = null, List<string> articleId = null, List<string> articleModelId = null, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article Reviews
        /// </summary>
        /// <remarks>
        /// Zalando API Article Reviews Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique article reviews. (optional)</param>
        /// <param name="articleId">To articles reviews. (optional)</param>
        /// <param name="articleModelId">To get article model ids reviews. (optional)</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleReviews</returns>
        ApiResponse<ArticleReviews> ArticleReviewsGetWithHttpInfo (List<string> reviewId = null, List<string> articleId = null, List<string> articleModelId = null, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article Reviews by reviewId
        /// </summary>
        /// <remarks>
        /// Zalando API ArticleReviews Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique review by review Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleReview</returns>
        ArticleReview ArticleReviewsReviewIdGet (string reviewId, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article Reviews by reviewId
        /// </summary>
        /// <remarks>
        /// Zalando API ArticleReviews Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique review by review Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleReview</returns>
        ApiResponse<ArticleReview> ArticleReviewsReviewIdGetWithHttpInfo (string reviewId, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article Reviews Summaries by articleModelId
        /// </summary>
        /// <remarks>
        /// Zalando API ArticleReviewsSummaries Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get unique reviews summary from article model Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleReviewsSummary</returns>
        ArticleReviewsSummary ArticleReviewsSummariesArticleModelIdGet (string articleModelId, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article Reviews Summaries by articleModelId
        /// </summary>
        /// <remarks>
        /// Zalando API ArticleReviewsSummaries Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get unique reviews summary from article model Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleReviewsSummary</returns>
        ApiResponse<ArticleReviewsSummary> ArticleReviewsSummariesArticleModelIdGetWithHttpInfo (string articleModelId, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article Reviews Summaries
        /// </summary>
        /// <remarks>
        /// Zalando API Article Reviews Summaries Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get article model ids review summaries. (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleReviewsSummaries</returns>
        ArticleReviewsSummaries ArticleReviewsSummariesGet (List<string> articleModelId = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article Reviews Summaries
        /// </summary>
        /// <remarks>
        /// Zalando API Article Reviews Summaries Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get article model ids review summaries. (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleReviewsSummaries</returns>
        ApiResponse<ArticleReviewsSummaries> ArticleReviewsSummariesGetWithHttpInfo (List<string> articleModelId = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Article</returns>
        Article ArticlesArticleIdGet (string articleId, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of Article</returns>
        ApiResponse<Article> ArticlesArticleIdGetWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article media by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id media.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleMedia</returns>
        ArticleMedia ArticlesArticleIdMediaGet (string articleId, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article media by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id media.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleMedia</returns>
        ApiResponse<ArticleMedia> ArticlesArticleIdMediaGetWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article reviews by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews.</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleReviews</returns>
        ArticleReviews ArticlesArticleIdReviewsGet (string articleId, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article reviews by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews.</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleReviews</returns>
        ApiResponse<ArticleReviews> ArticlesArticleIdReviewsGetWithHttpInfo (string articleId, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article reviews summary by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews summary.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleReviewsSummary</returns>
        ArticleReviewsSummary ArticlesArticleIdReviewsSummaryGet (string articleId, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article reviews summary by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews summary.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleReviewsSummary</returns>
        ApiResponse<ArticleReviewsSummary> ArticlesArticleIdReviewsSummaryGetWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article units by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id units.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleUnits</returns>
        ArticleUnits ArticlesArticleIdUnitsGet (string articleId, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article units by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id units.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleUnits</returns>
        ApiResponse<ArticleUnits> ArticlesArticleIdUnitsGetWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article units by articleId snd unitId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="unitId">To get unique article for article Id unit.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleUnit</returns>
        ArticleUnit ArticlesArticleIdUnitsUnitIdGet (string articleId, string unitId, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article units by articleId snd unitId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="unitId">To get unique article for article Id unit.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleUnit</returns>
        ApiResponse<ArticleUnit> ArticlesArticleIdUnitsUnitIdGetWithHttpInfo (string articleId, string unitId, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Shop Articles
        /// </summary>
        /// <remarks>
        /// Zalando API Articles Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="articleUnitId">filters by article&#39;s unit id (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="fullText">filters by text (eg: search by &#39;as&#39; gives result with articles of brand Sass) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="sort">sorting order (eg: popularity) (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Articles</returns>
        Articles ArticlesGet (List<string> articleId = null, List<string> articleModelId = null, List<string> articleUnitId = null, List<string> activationDate = null, List<string> ageGroup = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, string fullText = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string page = null, string pageSize = null, string sort = null, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Shop Articles
        /// </summary>
        /// <remarks>
        /// Zalando API Articles Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="articleUnitId">filters by article&#39;s unit id (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="fullText">filters by text (eg: search by &#39;as&#39; gives result with articles of brand Sass) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="sort">sorting order (eg: popularity) (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of Articles</returns>
        ApiResponse<Articles> ArticlesGetWithHttpInfo (List<string> articleId = null, List<string> articleModelId = null, List<string> articleUnitId = null, List<string> activationDate = null, List<string> ageGroup = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, string fullText = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string page = null, string pageSize = null, string sort = null, string acceptLanguage = null, List<string> fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Article Reviews
        /// </summary>
        /// <remarks>
        /// Zalando API Article Reviews Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique article reviews. (optional)</param>
        /// <param name="articleId">To articles reviews. (optional)</param>
        /// <param name="articleModelId">To get article model ids reviews. (optional)</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleReviews</returns>
        System.Threading.Tasks.Task<ArticleReviews> ArticleReviewsGetAsync (List<string> reviewId = null, List<string> articleId = null, List<string> articleModelId = null, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article Reviews
        /// </summary>
        /// <remarks>
        /// Zalando API Article Reviews Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique article reviews. (optional)</param>
        /// <param name="articleId">To articles reviews. (optional)</param>
        /// <param name="articleModelId">To get article model ids reviews. (optional)</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleReviews)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleReviews>> ArticleReviewsGetAsyncWithHttpInfo (List<string> reviewId = null, List<string> articleId = null, List<string> articleModelId = null, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article Reviews by reviewId
        /// </summary>
        /// <remarks>
        /// Zalando API ArticleReviews Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique review by review Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleReview</returns>
        System.Threading.Tasks.Task<ArticleReview> ArticleReviewsReviewIdGetAsync (string reviewId, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article Reviews by reviewId
        /// </summary>
        /// <remarks>
        /// Zalando API ArticleReviews Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique review by review Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleReview)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleReview>> ArticleReviewsReviewIdGetAsyncWithHttpInfo (string reviewId, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article Reviews Summaries by articleModelId
        /// </summary>
        /// <remarks>
        /// Zalando API ArticleReviewsSummaries Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get unique reviews summary from article model Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleReviewsSummary</returns>
        System.Threading.Tasks.Task<ArticleReviewsSummary> ArticleReviewsSummariesArticleModelIdGetAsync (string articleModelId, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article Reviews Summaries by articleModelId
        /// </summary>
        /// <remarks>
        /// Zalando API ArticleReviewsSummaries Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get unique reviews summary from article model Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleReviewsSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleReviewsSummary>> ArticleReviewsSummariesArticleModelIdGetAsyncWithHttpInfo (string articleModelId, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article Reviews Summaries
        /// </summary>
        /// <remarks>
        /// Zalando API Article Reviews Summaries Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get article model ids review summaries. (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleReviewsSummaries</returns>
        System.Threading.Tasks.Task<ArticleReviewsSummaries> ArticleReviewsSummariesGetAsync (List<string> articleModelId = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article Reviews Summaries
        /// </summary>
        /// <remarks>
        /// Zalando API Article Reviews Summaries Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get article model ids review summaries. (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleReviewsSummaries)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleReviewsSummaries>> ArticleReviewsSummariesGetAsyncWithHttpInfo (List<string> articleModelId = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of Article</returns>
        System.Threading.Tasks.Task<Article> ArticlesArticleIdGetAsync (string articleId, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (Article)</returns>
        System.Threading.Tasks.Task<ApiResponse<Article>> ArticlesArticleIdGetAsyncWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article media by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id media.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleMedia</returns>
        System.Threading.Tasks.Task<ArticleMedia> ArticlesArticleIdMediaGetAsync (string articleId, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article media by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id media.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleMedia)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleMedia>> ArticlesArticleIdMediaGetAsyncWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article reviews by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews.</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleReviews</returns>
        System.Threading.Tasks.Task<ArticleReviews> ArticlesArticleIdReviewsGetAsync (string articleId, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article reviews by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews.</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleReviews)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleReviews>> ArticlesArticleIdReviewsGetAsyncWithHttpInfo (string articleId, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article reviews summary by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews summary.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleReviewsSummary</returns>
        System.Threading.Tasks.Task<ArticleReviewsSummary> ArticlesArticleIdReviewsSummaryGetAsync (string articleId, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article reviews summary by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews summary.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleReviewsSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleReviewsSummary>> ArticlesArticleIdReviewsSummaryGetAsyncWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article units by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id units.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleUnits</returns>
        System.Threading.Tasks.Task<ArticleUnits> ArticlesArticleIdUnitsGetAsync (string articleId, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article units by articleId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id units.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleUnits)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleUnits>> ArticlesArticleIdUnitsGetAsyncWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Article units by articleId snd unitId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="unitId">To get unique article for article Id unit.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleUnit</returns>
        System.Threading.Tasks.Task<ArticleUnit> ArticlesArticleIdUnitsUnitIdGetAsync (string articleId, string unitId, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Article units by articleId snd unitId
        /// </summary>
        /// <remarks>
        /// Zalando API Article Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="unitId">To get unique article for article Id unit.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleUnit)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleUnit>> ArticlesArticleIdUnitsUnitIdGetAsyncWithHttpInfo (string articleId, string unitId, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Shop Articles
        /// </summary>
        /// <remarks>
        /// Zalando API Articles Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="articleUnitId">filters by article&#39;s unit id (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="fullText">filters by text (eg: search by &#39;as&#39; gives result with articles of brand Sass) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="sort">sorting order (eg: popularity) (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of Articles</returns>
        System.Threading.Tasks.Task<Articles> ArticlesGetAsync (List<string> articleId = null, List<string> articleModelId = null, List<string> articleUnitId = null, List<string> activationDate = null, List<string> ageGroup = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, string fullText = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string page = null, string pageSize = null, string sort = null, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Shop Articles
        /// </summary>
        /// <remarks>
        /// Zalando API Articles Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="articleUnitId">filters by article&#39;s unit id (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="fullText">filters by text (eg: search by &#39;as&#39; gives result with articles of brand Sass) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="sort">sorting order (eg: popularity) (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (Articles)</returns>
        System.Threading.Tasks.Task<ApiResponse<Articles>> ArticlesGetAsyncWithHttpInfo (List<string> articleId = null, List<string> articleModelId = null, List<string> articleUnitId = null, List<string> activationDate = null, List<string> ageGroup = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, string fullText = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string page = null, string pageSize = null, string sort = null, string acceptLanguage = null, List<string> fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ArticlesApi : IArticlesApi
    {
        private ZalandoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticlesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArticlesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = ZalandoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticlesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ArticlesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ZalandoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ZalandoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Article Reviews Zalando API Article Reviews Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique article reviews. (optional)</param>
        /// <param name="articleId">To articles reviews. (optional)</param>
        /// <param name="articleModelId">To get article model ids reviews. (optional)</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleReviews</returns>
        public ArticleReviews ArticleReviewsGet (List<string> reviewId = null, List<string> articleId = null, List<string> articleModelId = null, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleReviews> localVarResponse = ArticleReviewsGetWithHttpInfo(reviewId, articleId, articleModelId, minStarRating, maxStarRating, sort, page, pageSize, acceptLanguage, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Article Reviews Zalando API Article Reviews Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique article reviews. (optional)</param>
        /// <param name="articleId">To articles reviews. (optional)</param>
        /// <param name="articleModelId">To get article model ids reviews. (optional)</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleReviews</returns>
        public ApiResponse< ArticleReviews > ArticleReviewsGetWithHttpInfo (List<string> reviewId = null, List<string> articleId = null, List<string> articleModelId = null, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {

            var localVarPath = "/article-reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (reviewId != null) localVarQueryParams.Add("reviewId", Configuration.ApiClient.ParameterToString(reviewId)); // query parameter
            if (articleId != null) localVarQueryParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // query parameter
            if (articleModelId != null) localVarQueryParams.Add("articleModelId", Configuration.ApiClient.ParameterToString(articleModelId)); // query parameter
            if (minStarRating != null) localVarQueryParams.Add("minStarRating", Configuration.ApiClient.ParameterToString(minStarRating)); // query parameter
            if (maxStarRating != null) localVarQueryParams.Add("maxStarRating", Configuration.ApiClient.ParameterToString(maxStarRating)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleReviewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleReviews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleReviews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleReviews)));
            
        }

        /// <summary>
        /// Get Article Reviews Zalando API Article Reviews Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique article reviews. (optional)</param>
        /// <param name="articleId">To articles reviews. (optional)</param>
        /// <param name="articleModelId">To get article model ids reviews. (optional)</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleReviews</returns>
        public async System.Threading.Tasks.Task<ArticleReviews> ArticleReviewsGetAsync (List<string> reviewId = null, List<string> articleId = null, List<string> articleModelId = null, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleReviews> localVarResponse = await ArticleReviewsGetAsyncWithHttpInfo(reviewId, articleId, articleModelId, minStarRating, maxStarRating, sort, page, pageSize, acceptLanguage, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Article Reviews Zalando API Article Reviews Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique article reviews. (optional)</param>
        /// <param name="articleId">To articles reviews. (optional)</param>
        /// <param name="articleModelId">To get article model ids reviews. (optional)</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleReviews)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArticleReviews>> ArticleReviewsGetAsyncWithHttpInfo (List<string> reviewId = null, List<string> articleId = null, List<string> articleModelId = null, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {

            var localVarPath = "/article-reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (reviewId != null) localVarQueryParams.Add("reviewId", Configuration.ApiClient.ParameterToString(reviewId)); // query parameter
            if (articleId != null) localVarQueryParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // query parameter
            if (articleModelId != null) localVarQueryParams.Add("articleModelId", Configuration.ApiClient.ParameterToString(articleModelId)); // query parameter
            if (minStarRating != null) localVarQueryParams.Add("minStarRating", Configuration.ApiClient.ParameterToString(minStarRating)); // query parameter
            if (maxStarRating != null) localVarQueryParams.Add("maxStarRating", Configuration.ApiClient.ParameterToString(maxStarRating)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleReviewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleReviews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleReviews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleReviews)));
            
        }

        /// <summary>
        /// Get Article Reviews by reviewId Zalando API ArticleReviews Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique review by review Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleReview</returns>
        public ArticleReview ArticleReviewsReviewIdGet (string reviewId, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleReview> localVarResponse = ArticleReviewsReviewIdGetWithHttpInfo(reviewId, acceptLanguage, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Article Reviews by reviewId Zalando API ArticleReviews Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique review by review Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleReview</returns>
        public ApiResponse< ArticleReview > ArticleReviewsReviewIdGetWithHttpInfo (string reviewId, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'reviewId' is set
            if (reviewId == null)
                throw new ApiException(400, "Missing required parameter 'reviewId' when calling ArticlesApi->ArticleReviewsReviewIdGet");

            var localVarPath = "/article-reviews/{reviewId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (reviewId != null) localVarPathParams.Add("reviewId", Configuration.ApiClient.ParameterToString(reviewId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleReviewsReviewIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleReview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleReview) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleReview)));
            
        }

        /// <summary>
        /// Get Article Reviews by reviewId Zalando API ArticleReviews Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique review by review Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleReview</returns>
        public async System.Threading.Tasks.Task<ArticleReview> ArticleReviewsReviewIdGetAsync (string reviewId, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleReview> localVarResponse = await ArticleReviewsReviewIdGetAsyncWithHttpInfo(reviewId, acceptLanguage, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Article Reviews by reviewId Zalando API ArticleReviews Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">To get unique review by review Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleReview)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArticleReview>> ArticleReviewsReviewIdGetAsyncWithHttpInfo (string reviewId, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'reviewId' is set
            if (reviewId == null)
                throw new ApiException(400, "Missing required parameter 'reviewId' when calling ArticlesApi->ArticleReviewsReviewIdGet");

            var localVarPath = "/article-reviews/{reviewId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (reviewId != null) localVarPathParams.Add("reviewId", Configuration.ApiClient.ParameterToString(reviewId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleReviewsReviewIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleReview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleReview) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleReview)));
            
        }

        /// <summary>
        /// Get Article Reviews Summaries by articleModelId Zalando API ArticleReviewsSummaries Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get unique reviews summary from article model Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleReviewsSummary</returns>
        public ArticleReviewsSummary ArticleReviewsSummariesArticleModelIdGet (string articleModelId, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleReviewsSummary> localVarResponse = ArticleReviewsSummariesArticleModelIdGetWithHttpInfo(articleModelId, acceptLanguage, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Article Reviews Summaries by articleModelId Zalando API ArticleReviewsSummaries Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get unique reviews summary from article model Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleReviewsSummary</returns>
        public ApiResponse< ArticleReviewsSummary > ArticleReviewsSummariesArticleModelIdGetWithHttpInfo (string articleModelId, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'articleModelId' is set
            if (articleModelId == null)
                throw new ApiException(400, "Missing required parameter 'articleModelId' when calling ArticlesApi->ArticleReviewsSummariesArticleModelIdGet");

            var localVarPath = "/article-reviews-summaries/{articleModelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleModelId != null) localVarPathParams.Add("articleModelId", Configuration.ApiClient.ParameterToString(articleModelId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleReviewsSummariesArticleModelIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleReviewsSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleReviewsSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleReviewsSummary)));
            
        }

        /// <summary>
        /// Get Article Reviews Summaries by articleModelId Zalando API ArticleReviewsSummaries Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get unique reviews summary from article model Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleReviewsSummary</returns>
        public async System.Threading.Tasks.Task<ArticleReviewsSummary> ArticleReviewsSummariesArticleModelIdGetAsync (string articleModelId, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleReviewsSummary> localVarResponse = await ArticleReviewsSummariesArticleModelIdGetAsyncWithHttpInfo(articleModelId, acceptLanguage, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Article Reviews Summaries by articleModelId Zalando API ArticleReviewsSummaries Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get unique reviews summary from article model Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleReviewsSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArticleReviewsSummary>> ArticleReviewsSummariesArticleModelIdGetAsyncWithHttpInfo (string articleModelId, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'articleModelId' is set
            if (articleModelId == null)
                throw new ApiException(400, "Missing required parameter 'articleModelId' when calling ArticlesApi->ArticleReviewsSummariesArticleModelIdGet");

            var localVarPath = "/article-reviews-summaries/{articleModelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleModelId != null) localVarPathParams.Add("articleModelId", Configuration.ApiClient.ParameterToString(articleModelId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleReviewsSummariesArticleModelIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleReviewsSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleReviewsSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleReviewsSummary)));
            
        }

        /// <summary>
        /// Get Article Reviews Summaries Zalando API Article Reviews Summaries Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get article model ids review summaries. (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleReviewsSummaries</returns>
        public ArticleReviewsSummaries ArticleReviewsSummariesGet (List<string> articleModelId = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleReviewsSummaries> localVarResponse = ArticleReviewsSummariesGetWithHttpInfo(articleModelId, page, pageSize, acceptLanguage, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Article Reviews Summaries Zalando API Article Reviews Summaries Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get article model ids review summaries. (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleReviewsSummaries</returns>
        public ApiResponse< ArticleReviewsSummaries > ArticleReviewsSummariesGetWithHttpInfo (List<string> articleModelId = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {

            var localVarPath = "/article-reviews-summaries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleModelId != null) localVarQueryParams.Add("articleModelId", Configuration.ApiClient.ParameterToString(articleModelId)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleReviewsSummariesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleReviewsSummaries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleReviewsSummaries) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleReviewsSummaries)));
            
        }

        /// <summary>
        /// Get Article Reviews Summaries Zalando API Article Reviews Summaries Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get article model ids review summaries. (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleReviewsSummaries</returns>
        public async System.Threading.Tasks.Task<ArticleReviewsSummaries> ArticleReviewsSummariesGetAsync (List<string> articleModelId = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleReviewsSummaries> localVarResponse = await ArticleReviewsSummariesGetAsyncWithHttpInfo(articleModelId, page, pageSize, acceptLanguage, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Article Reviews Summaries Zalando API Article Reviews Summaries Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleModelId">To get article model ids review summaries. (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleReviewsSummaries)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArticleReviewsSummaries>> ArticleReviewsSummariesGetAsyncWithHttpInfo (List<string> articleModelId = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {

            var localVarPath = "/article-reviews-summaries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleModelId != null) localVarQueryParams.Add("articleModelId", Configuration.ApiClient.ParameterToString(articleModelId)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleReviewsSummariesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleReviewsSummaries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleReviewsSummaries) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleReviewsSummaries)));
            
        }

        /// <summary>
        /// Get Article by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Article</returns>
        public Article ArticlesArticleIdGet (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<Article> localVarResponse = ArticlesArticleIdGetWithHttpInfo(articleId, acceptLanguage, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Article by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of Article</returns>
        public ApiResponse< Article > ArticlesArticleIdGetWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'articleId' is set
            if (articleId == null)
                throw new ApiException(400, "Missing required parameter 'articleId' when calling ArticlesApi->ArticlesArticleIdGet");

            var localVarPath = "/articles/{articleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleId != null) localVarPathParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticlesArticleIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Article>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Article) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Article)));
            
        }

        /// <summary>
        /// Get Article by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of Article</returns>
        public async System.Threading.Tasks.Task<Article> ArticlesArticleIdGetAsync (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<Article> localVarResponse = await ArticlesArticleIdGetAsyncWithHttpInfo(articleId, acceptLanguage, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Article by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (Article)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Article>> ArticlesArticleIdGetAsyncWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'articleId' is set
            if (articleId == null)
                throw new ApiException(400, "Missing required parameter 'articleId' when calling ArticlesApi->ArticlesArticleIdGet");

            var localVarPath = "/articles/{articleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleId != null) localVarPathParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticlesArticleIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Article>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Article) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Article)));
            
        }

        /// <summary>
        /// Get Article media by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id media.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleMedia</returns>
        public ArticleMedia ArticlesArticleIdMediaGet (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleMedia> localVarResponse = ArticlesArticleIdMediaGetWithHttpInfo(articleId, acceptLanguage, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Article media by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id media.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleMedia</returns>
        public ApiResponse< ArticleMedia > ArticlesArticleIdMediaGetWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'articleId' is set
            if (articleId == null)
                throw new ApiException(400, "Missing required parameter 'articleId' when calling ArticlesApi->ArticlesArticleIdMediaGet");

            var localVarPath = "/articles/{articleId}/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleId != null) localVarPathParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticlesArticleIdMediaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleMedia>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleMedia) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleMedia)));
            
        }

        /// <summary>
        /// Get Article media by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id media.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleMedia</returns>
        public async System.Threading.Tasks.Task<ArticleMedia> ArticlesArticleIdMediaGetAsync (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleMedia> localVarResponse = await ArticlesArticleIdMediaGetAsyncWithHttpInfo(articleId, acceptLanguage, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Article media by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id media.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleMedia)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArticleMedia>> ArticlesArticleIdMediaGetAsyncWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'articleId' is set
            if (articleId == null)
                throw new ApiException(400, "Missing required parameter 'articleId' when calling ArticlesApi->ArticlesArticleIdMediaGet");

            var localVarPath = "/articles/{articleId}/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleId != null) localVarPathParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticlesArticleIdMediaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleMedia>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleMedia) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleMedia)));
            
        }

        /// <summary>
        /// Get Article reviews by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews.</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleReviews</returns>
        public ArticleReviews ArticlesArticleIdReviewsGet (string articleId, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleReviews> localVarResponse = ArticlesArticleIdReviewsGetWithHttpInfo(articleId, minStarRating, maxStarRating, sort, page, pageSize, acceptLanguage, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Article reviews by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews.</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleReviews</returns>
        public ApiResponse< ArticleReviews > ArticlesArticleIdReviewsGetWithHttpInfo (string articleId, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'articleId' is set
            if (articleId == null)
                throw new ApiException(400, "Missing required parameter 'articleId' when calling ArticlesApi->ArticlesArticleIdReviewsGet");

            var localVarPath = "/articles/{articleId}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleId != null) localVarPathParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // path parameter
            if (minStarRating != null) localVarQueryParams.Add("minStarRating", Configuration.ApiClient.ParameterToString(minStarRating)); // query parameter
            if (maxStarRating != null) localVarQueryParams.Add("maxStarRating", Configuration.ApiClient.ParameterToString(maxStarRating)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticlesArticleIdReviewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleReviews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleReviews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleReviews)));
            
        }

        /// <summary>
        /// Get Article reviews by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews.</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleReviews</returns>
        public async System.Threading.Tasks.Task<ArticleReviews> ArticlesArticleIdReviewsGetAsync (string articleId, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleReviews> localVarResponse = await ArticlesArticleIdReviewsGetAsyncWithHttpInfo(articleId, minStarRating, maxStarRating, sort, page, pageSize, acceptLanguage, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Article reviews by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews.</param>
        /// <param name="minStarRating">To get reviews with minimum star rating. (optional)</param>
        /// <param name="maxStarRating">To get reviews with maximum star rating. (optional)</param>
        /// <param name="sort">articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleReviews)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArticleReviews>> ArticlesArticleIdReviewsGetAsyncWithHttpInfo (string articleId, string minStarRating = null, string maxStarRating = null, string sort = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'articleId' is set
            if (articleId == null)
                throw new ApiException(400, "Missing required parameter 'articleId' when calling ArticlesApi->ArticlesArticleIdReviewsGet");

            var localVarPath = "/articles/{articleId}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleId != null) localVarPathParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // path parameter
            if (minStarRating != null) localVarQueryParams.Add("minStarRating", Configuration.ApiClient.ParameterToString(minStarRating)); // query parameter
            if (maxStarRating != null) localVarQueryParams.Add("maxStarRating", Configuration.ApiClient.ParameterToString(maxStarRating)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticlesArticleIdReviewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleReviews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleReviews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleReviews)));
            
        }

        /// <summary>
        /// Get Article reviews summary by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews summary.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleReviewsSummary</returns>
        public ArticleReviewsSummary ArticlesArticleIdReviewsSummaryGet (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleReviewsSummary> localVarResponse = ArticlesArticleIdReviewsSummaryGetWithHttpInfo(articleId, acceptLanguage, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Article reviews summary by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews summary.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleReviewsSummary</returns>
        public ApiResponse< ArticleReviewsSummary > ArticlesArticleIdReviewsSummaryGetWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'articleId' is set
            if (articleId == null)
                throw new ApiException(400, "Missing required parameter 'articleId' when calling ArticlesApi->ArticlesArticleIdReviewsSummaryGet");

            var localVarPath = "/articles/{articleId}/reviews-summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleId != null) localVarPathParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticlesArticleIdReviewsSummaryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleReviewsSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleReviewsSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleReviewsSummary)));
            
        }

        /// <summary>
        /// Get Article reviews summary by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews summary.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleReviewsSummary</returns>
        public async System.Threading.Tasks.Task<ArticleReviewsSummary> ArticlesArticleIdReviewsSummaryGetAsync (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleReviewsSummary> localVarResponse = await ArticlesArticleIdReviewsSummaryGetAsyncWithHttpInfo(articleId, acceptLanguage, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Article reviews summary by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id reviews summary.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleReviewsSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArticleReviewsSummary>> ArticlesArticleIdReviewsSummaryGetAsyncWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'articleId' is set
            if (articleId == null)
                throw new ApiException(400, "Missing required parameter 'articleId' when calling ArticlesApi->ArticlesArticleIdReviewsSummaryGet");

            var localVarPath = "/articles/{articleId}/reviews-summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleId != null) localVarPathParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticlesArticleIdReviewsSummaryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleReviewsSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleReviewsSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleReviewsSummary)));
            
        }

        /// <summary>
        /// Get Article units by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id units.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleUnits</returns>
        public ArticleUnits ArticlesArticleIdUnitsGet (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleUnits> localVarResponse = ArticlesArticleIdUnitsGetWithHttpInfo(articleId, acceptLanguage, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Article units by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id units.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleUnits</returns>
        public ApiResponse< ArticleUnits > ArticlesArticleIdUnitsGetWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'articleId' is set
            if (articleId == null)
                throw new ApiException(400, "Missing required parameter 'articleId' when calling ArticlesApi->ArticlesArticleIdUnitsGet");

            var localVarPath = "/articles/{articleId}/units";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleId != null) localVarPathParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticlesArticleIdUnitsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleUnits>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleUnits) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleUnits)));
            
        }

        /// <summary>
        /// Get Article units by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id units.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleUnits</returns>
        public async System.Threading.Tasks.Task<ArticleUnits> ArticlesArticleIdUnitsGetAsync (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleUnits> localVarResponse = await ArticlesArticleIdUnitsGetAsyncWithHttpInfo(articleId, acceptLanguage, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Article units by articleId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id units.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleUnits)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArticleUnits>> ArticlesArticleIdUnitsGetAsyncWithHttpInfo (string articleId, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'articleId' is set
            if (articleId == null)
                throw new ApiException(400, "Missing required parameter 'articleId' when calling ArticlesApi->ArticlesArticleIdUnitsGet");

            var localVarPath = "/articles/{articleId}/units";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleId != null) localVarPathParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticlesArticleIdUnitsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleUnits>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleUnits) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleUnits)));
            
        }

        /// <summary>
        /// Get Article units by articleId snd unitId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="unitId">To get unique article for article Id unit.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ArticleUnit</returns>
        public ArticleUnit ArticlesArticleIdUnitsUnitIdGet (string articleId, string unitId, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleUnit> localVarResponse = ArticlesArticleIdUnitsUnitIdGetWithHttpInfo(articleId, unitId, acceptLanguage, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Article units by articleId snd unitId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="unitId">To get unique article for article Id unit.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of ArticleUnit</returns>
        public ApiResponse< ArticleUnit > ArticlesArticleIdUnitsUnitIdGetWithHttpInfo (string articleId, string unitId, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'articleId' is set
            if (articleId == null)
                throw new ApiException(400, "Missing required parameter 'articleId' when calling ArticlesApi->ArticlesArticleIdUnitsUnitIdGet");
            // verify the required parameter 'unitId' is set
            if (unitId == null)
                throw new ApiException(400, "Missing required parameter 'unitId' when calling ArticlesApi->ArticlesArticleIdUnitsUnitIdGet");

            var localVarPath = "/articles/{articleId}/units/{unitId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleId != null) localVarPathParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // path parameter
            if (unitId != null) localVarPathParams.Add("unitId", Configuration.ApiClient.ParameterToString(unitId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticlesArticleIdUnitsUnitIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleUnit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleUnit) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleUnit)));
            
        }

        /// <summary>
        /// Get Article units by articleId snd unitId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="unitId">To get unique article for article Id unit.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ArticleUnit</returns>
        public async System.Threading.Tasks.Task<ArticleUnit> ArticlesArticleIdUnitsUnitIdGetAsync (string articleId, string unitId, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<ArticleUnit> localVarResponse = await ArticlesArticleIdUnitsUnitIdGetAsyncWithHttpInfo(articleId, unitId, acceptLanguage, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Article units by articleId snd unitId Zalando API Article Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">To get unique article for article Id.</param>
        /// <param name="unitId">To get unique article for article Id unit.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (ArticleUnit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArticleUnit>> ArticlesArticleIdUnitsUnitIdGetAsyncWithHttpInfo (string articleId, string unitId, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'articleId' is set
            if (articleId == null)
                throw new ApiException(400, "Missing required parameter 'articleId' when calling ArticlesApi->ArticlesArticleIdUnitsUnitIdGet");
            // verify the required parameter 'unitId' is set
            if (unitId == null)
                throw new ApiException(400, "Missing required parameter 'unitId' when calling ArticlesApi->ArticlesArticleIdUnitsUnitIdGet");

            var localVarPath = "/articles/{articleId}/units/{unitId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleId != null) localVarPathParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // path parameter
            if (unitId != null) localVarPathParams.Add("unitId", Configuration.ApiClient.ParameterToString(unitId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticlesArticleIdUnitsUnitIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleUnit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleUnit) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleUnit)));
            
        }

        /// <summary>
        /// Shop Articles Zalando API Articles Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="articleUnitId">filters by article&#39;s unit id (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="fullText">filters by text (eg: search by &#39;as&#39; gives result with articles of brand Sass) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="sort">sorting order (eg: popularity) (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Articles</returns>
        public Articles ArticlesGet (List<string> articleId = null, List<string> articleModelId = null, List<string> articleUnitId = null, List<string> activationDate = null, List<string> ageGroup = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, string fullText = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string page = null, string pageSize = null, string sort = null, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<Articles> localVarResponse = ArticlesGetWithHttpInfo(articleId, articleModelId, articleUnitId, activationDate, ageGroup, assortmentArea, brand, brandfamily, category, color, den, filling, fullText, gender, heelForm, heelHeight, length, occasion, pattern, price, sale, season, shaftHeight, shaftWidth, shirtCollar, shoeFastener, shoeToecap, shopArea, size, sports, technology, trouserRise, upperMaterial, volume, page, pageSize, sort, acceptLanguage, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Shop Articles Zalando API Articles Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="articleUnitId">filters by article&#39;s unit id (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="fullText">filters by text (eg: search by &#39;as&#39; gives result with articles of brand Sass) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="sort">sorting order (eg: popularity) (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of Articles</returns>
        public ApiResponse< Articles > ArticlesGetWithHttpInfo (List<string> articleId = null, List<string> articleModelId = null, List<string> articleUnitId = null, List<string> activationDate = null, List<string> ageGroup = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, string fullText = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string page = null, string pageSize = null, string sort = null, string acceptLanguage = null, List<string> fields = null)
        {

            var localVarPath = "/articles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleId != null) localVarQueryParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // query parameter
            if (articleModelId != null) localVarQueryParams.Add("articleModelId", Configuration.ApiClient.ParameterToString(articleModelId)); // query parameter
            if (articleUnitId != null) localVarQueryParams.Add("articleUnitId", Configuration.ApiClient.ParameterToString(articleUnitId)); // query parameter
            if (activationDate != null) localVarQueryParams.Add("activationDate", Configuration.ApiClient.ParameterToString(activationDate)); // query parameter
            if (ageGroup != null) localVarQueryParams.Add("ageGroup", Configuration.ApiClient.ParameterToString(ageGroup)); // query parameter
            if (assortmentArea != null) localVarQueryParams.Add("assortmentArea", Configuration.ApiClient.ParameterToString(assortmentArea)); // query parameter
            if (brand != null) localVarQueryParams.Add("brand", Configuration.ApiClient.ParameterToString(brand)); // query parameter
            if (brandfamily != null) localVarQueryParams.Add("brandfamily", Configuration.ApiClient.ParameterToString(brandfamily)); // query parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter
            if (color != null) localVarQueryParams.Add("color", Configuration.ApiClient.ParameterToString(color)); // query parameter
            if (den != null) localVarQueryParams.Add("den", Configuration.ApiClient.ParameterToString(den)); // query parameter
            if (filling != null) localVarQueryParams.Add("filling", Configuration.ApiClient.ParameterToString(filling)); // query parameter
            if (fullText != null) localVarQueryParams.Add("fullText", Configuration.ApiClient.ParameterToString(fullText)); // query parameter
            if (gender != null) localVarQueryParams.Add("gender", Configuration.ApiClient.ParameterToString(gender)); // query parameter
            if (heelForm != null) localVarQueryParams.Add("heelForm", Configuration.ApiClient.ParameterToString(heelForm)); // query parameter
            if (heelHeight != null) localVarQueryParams.Add("heelHeight", Configuration.ApiClient.ParameterToString(heelHeight)); // query parameter
            if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
            if (occasion != null) localVarQueryParams.Add("occasion", Configuration.ApiClient.ParameterToString(occasion)); // query parameter
            if (pattern != null) localVarQueryParams.Add("pattern", Configuration.ApiClient.ParameterToString(pattern)); // query parameter
            if (price != null) localVarQueryParams.Add("price", Configuration.ApiClient.ParameterToString(price)); // query parameter
            if (sale != null) localVarQueryParams.Add("sale", Configuration.ApiClient.ParameterToString(sale)); // query parameter
            if (season != null) localVarQueryParams.Add("season", Configuration.ApiClient.ParameterToString(season)); // query parameter
            if (shaftHeight != null) localVarQueryParams.Add("shaftHeight", Configuration.ApiClient.ParameterToString(shaftHeight)); // query parameter
            if (shaftWidth != null) localVarQueryParams.Add("shaftWidth", Configuration.ApiClient.ParameterToString(shaftWidth)); // query parameter
            if (shirtCollar != null) localVarQueryParams.Add("shirtCollar", Configuration.ApiClient.ParameterToString(shirtCollar)); // query parameter
            if (shoeFastener != null) localVarQueryParams.Add("shoeFastener", Configuration.ApiClient.ParameterToString(shoeFastener)); // query parameter
            if (shoeToecap != null) localVarQueryParams.Add("shoeToecap", Configuration.ApiClient.ParameterToString(shoeToecap)); // query parameter
            if (shopArea != null) localVarQueryParams.Add("shopArea", Configuration.ApiClient.ParameterToString(shopArea)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (sports != null) localVarQueryParams.Add("sports", Configuration.ApiClient.ParameterToString(sports)); // query parameter
            if (technology != null) localVarQueryParams.Add("technology", Configuration.ApiClient.ParameterToString(technology)); // query parameter
            if (trouserRise != null) localVarQueryParams.Add("trouserRise", Configuration.ApiClient.ParameterToString(trouserRise)); // query parameter
            if (upperMaterial != null) localVarQueryParams.Add("upperMaterial", Configuration.ApiClient.ParameterToString(upperMaterial)); // query parameter
            if (volume != null) localVarQueryParams.Add("volume", Configuration.ApiClient.ParameterToString(volume)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticlesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Articles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Articles) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Articles)));
            
        }

        /// <summary>
        /// Shop Articles Zalando API Articles Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="articleUnitId">filters by article&#39;s unit id (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="fullText">filters by text (eg: search by &#39;as&#39; gives result with articles of brand Sass) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="sort">sorting order (eg: popularity) (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of Articles</returns>
        public async System.Threading.Tasks.Task<Articles> ArticlesGetAsync (List<string> articleId = null, List<string> articleModelId = null, List<string> articleUnitId = null, List<string> activationDate = null, List<string> ageGroup = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, string fullText = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string page = null, string pageSize = null, string sort = null, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<Articles> localVarResponse = await ArticlesGetAsyncWithHttpInfo(articleId, articleModelId, articleUnitId, activationDate, ageGroup, assortmentArea, brand, brandfamily, category, color, den, filling, fullText, gender, heelForm, heelHeight, length, occasion, pattern, price, sale, season, shaftHeight, shaftWidth, shirtCollar, shoeFastener, shoeToecap, shopArea, size, sports, technology, trouserRise, upperMaterial, volume, page, pageSize, sort, acceptLanguage, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Shop Articles Zalando API Articles Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleId">filters by articleId (optional)</param>
        /// <param name="articleModelId">filters by article ModelId (optional)</param>
        /// <param name="articleUnitId">filters by article&#39;s unit id (optional)</param>
        /// <param name="activationDate">period or time the articles are activated for selling in the shop (optional)</param>
        /// <param name="ageGroup">filters by age group (eg: kids) (optional)</param>
        /// <param name="assortmentArea">filters by classification of articles (eg: maternity)  (optional)</param>
        /// <param name="brand">filters by brand key given by user (eg: SA5) (optional)</param>
        /// <param name="brandfamily">filters by brand family key (eg: nike)  (optional)</param>
        /// <param name="category">filters by category (eg: Socks, Rain Coats) (optional)</param>
        /// <param name="color">filters by color (eg: red, blue) (optional)</param>
        /// <param name="den">filters by den  (optional)</param>
        /// <param name="filling">filters by different kinds of garment filling materials (eg: satin, wolle) (optional)</param>
        /// <param name="fullText">filters by text (eg: search by &#39;as&#39; gives result with articles of brand Sass) (optional)</param>
        /// <param name="gender">filters by gender (optional)</param>
        /// <param name="heelForm">filters by heel form (eg: flat) (optional)</param>
        /// <param name="heelHeight">filters by height of the heel size or length (eg: xs) (optional)</param>
        /// <param name="length">filters by garments length (eg: 3/4 length, knee-length) (optional)</param>
        /// <param name="occasion">filters by type of occasion (eg: party, business) (optional)</param>
        /// <param name="pattern">filters by pattern on the garments (eg: animal print, plain) (optional)</param>
        /// <param name="price">filters all articles in price range (eg: 9-90) (optional)</param>
        /// <param name="sale">filters discounted articles marked as sale (optional)</param>
        /// <param name="season">filters by season (Autumn/Winter or Spring/Summer) (optional)</param>
        /// <param name="shaftHeight">filters by shaft height (eg: s, xs) (optional)</param>
        /// <param name="shaftWidth">filters by shaft width (eg: s, l) (optional)</param>
        /// <param name="shirtCollar">filters by shirt collar styles (eg: low V neck, lined collar) (optional)</param>
        /// <param name="shoeFastener">filters by shoe fastener types (eg: buckle, lacing) (optional)</param>
        /// <param name="shoeToecap">filters by shoe toe cap variants (eg: pointed, square) (optional)</param>
        /// <param name="shopArea">filters by classification of articles (optional)</param>
        /// <param name="size">filters by size (optional)</param>
        /// <param name="sports">filters by different sport activities (eg: football) (optional)</param>
        /// <param name="technology">filters by technology used to produce the articles (optional)</param>
        /// <param name="trouserRise">filters by trouser rise (optional)</param>
        /// <param name="upperMaterial">filters by different type of upper material used on garments (eg: lace) (optional)</param>
        /// <param name="volume">filters by volume (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="sort">sorting order (eg: popularity) (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (Articles)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Articles>> ArticlesGetAsyncWithHttpInfo (List<string> articleId = null, List<string> articleModelId = null, List<string> articleUnitId = null, List<string> activationDate = null, List<string> ageGroup = null, List<string> assortmentArea = null, List<string> brand = null, List<string> brandfamily = null, List<string> category = null, List<string> color = null, List<string> den = null, List<string> filling = null, string fullText = null, List<string> gender = null, List<string> heelForm = null, List<string> heelHeight = null, string length = null, List<string> occasion = null, List<string> pattern = null, string price = null, List<string> sale = null, List<string> season = null, List<string> shaftHeight = null, List<string> shaftWidth = null, List<string> shirtCollar = null, List<string> shoeFastener = null, List<string> shoeToecap = null, List<string> shopArea = null, string size = null, List<string> sports = null, List<string> technology = null, List<string> trouserRise = null, List<string> upperMaterial = null, List<string> volume = null, string page = null, string pageSize = null, string sort = null, string acceptLanguage = null, List<string> fields = null)
        {

            var localVarPath = "/articles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articleId != null) localVarQueryParams.Add("articleId", Configuration.ApiClient.ParameterToString(articleId)); // query parameter
            if (articleModelId != null) localVarQueryParams.Add("articleModelId", Configuration.ApiClient.ParameterToString(articleModelId)); // query parameter
            if (articleUnitId != null) localVarQueryParams.Add("articleUnitId", Configuration.ApiClient.ParameterToString(articleUnitId)); // query parameter
            if (activationDate != null) localVarQueryParams.Add("activationDate", Configuration.ApiClient.ParameterToString(activationDate)); // query parameter
            if (ageGroup != null) localVarQueryParams.Add("ageGroup", Configuration.ApiClient.ParameterToString(ageGroup)); // query parameter
            if (assortmentArea != null) localVarQueryParams.Add("assortmentArea", Configuration.ApiClient.ParameterToString(assortmentArea)); // query parameter
            if (brand != null) localVarQueryParams.Add("brand", Configuration.ApiClient.ParameterToString(brand)); // query parameter
            if (brandfamily != null) localVarQueryParams.Add("brandfamily", Configuration.ApiClient.ParameterToString(brandfamily)); // query parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter
            if (color != null) localVarQueryParams.Add("color", Configuration.ApiClient.ParameterToString(color)); // query parameter
            if (den != null) localVarQueryParams.Add("den", Configuration.ApiClient.ParameterToString(den)); // query parameter
            if (filling != null) localVarQueryParams.Add("filling", Configuration.ApiClient.ParameterToString(filling)); // query parameter
            if (fullText != null) localVarQueryParams.Add("fullText", Configuration.ApiClient.ParameterToString(fullText)); // query parameter
            if (gender != null) localVarQueryParams.Add("gender", Configuration.ApiClient.ParameterToString(gender)); // query parameter
            if (heelForm != null) localVarQueryParams.Add("heelForm", Configuration.ApiClient.ParameterToString(heelForm)); // query parameter
            if (heelHeight != null) localVarQueryParams.Add("heelHeight", Configuration.ApiClient.ParameterToString(heelHeight)); // query parameter
            if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
            if (occasion != null) localVarQueryParams.Add("occasion", Configuration.ApiClient.ParameterToString(occasion)); // query parameter
            if (pattern != null) localVarQueryParams.Add("pattern", Configuration.ApiClient.ParameterToString(pattern)); // query parameter
            if (price != null) localVarQueryParams.Add("price", Configuration.ApiClient.ParameterToString(price)); // query parameter
            if (sale != null) localVarQueryParams.Add("sale", Configuration.ApiClient.ParameterToString(sale)); // query parameter
            if (season != null) localVarQueryParams.Add("season", Configuration.ApiClient.ParameterToString(season)); // query parameter
            if (shaftHeight != null) localVarQueryParams.Add("shaftHeight", Configuration.ApiClient.ParameterToString(shaftHeight)); // query parameter
            if (shaftWidth != null) localVarQueryParams.Add("shaftWidth", Configuration.ApiClient.ParameterToString(shaftWidth)); // query parameter
            if (shirtCollar != null) localVarQueryParams.Add("shirtCollar", Configuration.ApiClient.ParameterToString(shirtCollar)); // query parameter
            if (shoeFastener != null) localVarQueryParams.Add("shoeFastener", Configuration.ApiClient.ParameterToString(shoeFastener)); // query parameter
            if (shoeToecap != null) localVarQueryParams.Add("shoeToecap", Configuration.ApiClient.ParameterToString(shoeToecap)); // query parameter
            if (shopArea != null) localVarQueryParams.Add("shopArea", Configuration.ApiClient.ParameterToString(shopArea)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (sports != null) localVarQueryParams.Add("sports", Configuration.ApiClient.ParameterToString(sports)); // query parameter
            if (technology != null) localVarQueryParams.Add("technology", Configuration.ApiClient.ParameterToString(technology)); // query parameter
            if (trouserRise != null) localVarQueryParams.Add("trouserRise", Configuration.ApiClient.ParameterToString(trouserRise)); // query parameter
            if (upperMaterial != null) localVarQueryParams.Add("upperMaterial", Configuration.ApiClient.ParameterToString(upperMaterial)); // query parameter
            if (volume != null) localVarQueryParams.Add("volume", Configuration.ApiClient.ParameterToString(volume)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticlesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Articles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Articles) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Articles)));
            
        }

    }
}
