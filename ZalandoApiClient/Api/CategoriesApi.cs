/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ZalandoApiClient.Client;
using ZalandoApiClient.Model;

namespace ZalandoApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoriesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Shop Categories
        /// </summary>
        /// <remarks>
        /// Zalando API Categories Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Request Categories by names (optional)</param>
        /// <param name="type">Request Categories by type (optional)</param>
        /// <param name="outlet">Request Categories by outlet (optional)</param>
        /// <param name="hidden">Request Categories by hidden (optional)</param>
        /// <param name="targetGroup">Request Categories by target group (optional)</param>
        /// <param name="key">Request Categories by keys (optional)</param>
        /// <param name="parentKey">Request Categories by parent keys (optional)</param>
        /// <param name="childKey">Request Categories by child keys (optional)</param>
        /// <param name="suggestedFilter">Request Categories by suggested filters (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Categories</returns>
        Categories CategoriesGet (List<string> name = null, string type = null, string outlet = null, string hidden = null, string targetGroup = null, List<string> key = null, List<string> parentKey = null, List<string> childKey = null, List<string> suggestedFilter = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Shop Categories
        /// </summary>
        /// <remarks>
        /// Zalando API Categories Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Request Categories by names (optional)</param>
        /// <param name="type">Request Categories by type (optional)</param>
        /// <param name="outlet">Request Categories by outlet (optional)</param>
        /// <param name="hidden">Request Categories by hidden (optional)</param>
        /// <param name="targetGroup">Request Categories by target group (optional)</param>
        /// <param name="key">Request Categories by keys (optional)</param>
        /// <param name="parentKey">Request Categories by parent keys (optional)</param>
        /// <param name="childKey">Request Categories by child keys (optional)</param>
        /// <param name="suggestedFilter">Request Categories by suggested filters (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of Categories</returns>
        ApiResponse<Categories> CategoriesGetWithHttpInfo (List<string> name = null, string type = null, string outlet = null, string hidden = null, string targetGroup = null, List<string> key = null, List<string> parentKey = null, List<string> childKey = null, List<string> suggestedFilter = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Single Category by Key
        /// </summary>
        /// <remarks>
        /// Zalando API Category Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">To get unique Category by key.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Category</returns>
        Category CategoriesKeyGet (List<string> key, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Single Category by Key
        /// </summary>
        /// <remarks>
        /// Zalando API Category Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">To get unique Category by key.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> CategoriesKeyGetWithHttpInfo (List<string> key, string acceptLanguage = null, List<string> fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Shop Categories
        /// </summary>
        /// <remarks>
        /// Zalando API Categories Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Request Categories by names (optional)</param>
        /// <param name="type">Request Categories by type (optional)</param>
        /// <param name="outlet">Request Categories by outlet (optional)</param>
        /// <param name="hidden">Request Categories by hidden (optional)</param>
        /// <param name="targetGroup">Request Categories by target group (optional)</param>
        /// <param name="key">Request Categories by keys (optional)</param>
        /// <param name="parentKey">Request Categories by parent keys (optional)</param>
        /// <param name="childKey">Request Categories by child keys (optional)</param>
        /// <param name="suggestedFilter">Request Categories by suggested filters (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of Categories</returns>
        System.Threading.Tasks.Task<Categories> CategoriesGetAsync (List<string> name = null, string type = null, string outlet = null, string hidden = null, string targetGroup = null, List<string> key = null, List<string> parentKey = null, List<string> childKey = null, List<string> suggestedFilter = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Shop Categories
        /// </summary>
        /// <remarks>
        /// Zalando API Categories Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Request Categories by names (optional)</param>
        /// <param name="type">Request Categories by type (optional)</param>
        /// <param name="outlet">Request Categories by outlet (optional)</param>
        /// <param name="hidden">Request Categories by hidden (optional)</param>
        /// <param name="targetGroup">Request Categories by target group (optional)</param>
        /// <param name="key">Request Categories by keys (optional)</param>
        /// <param name="parentKey">Request Categories by parent keys (optional)</param>
        /// <param name="childKey">Request Categories by child keys (optional)</param>
        /// <param name="suggestedFilter">Request Categories by suggested filters (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (Categories)</returns>
        System.Threading.Tasks.Task<ApiResponse<Categories>> CategoriesGetAsyncWithHttpInfo (List<string> name = null, string type = null, string outlet = null, string hidden = null, string targetGroup = null, List<string> key = null, List<string> parentKey = null, List<string> childKey = null, List<string> suggestedFilter = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null);
        /// <summary>
        /// Get Single Category by Key
        /// </summary>
        /// <remarks>
        /// Zalando API Category Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">To get unique Category by key.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> CategoriesKeyGetAsync (List<string> key, string acceptLanguage = null, List<string> fields = null);

        /// <summary>
        /// Get Single Category by Key
        /// </summary>
        /// <remarks>
        /// Zalando API Category Schema
        /// </remarks>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">To get unique Category by key.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> CategoriesKeyGetAsyncWithHttpInfo (List<string> key, string acceptLanguage = null, List<string> fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CategoriesApi : ICategoriesApi
    {
        private ZalandoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoriesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = ZalandoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CategoriesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ZalandoApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ZalandoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Shop Categories Zalando API Categories Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Request Categories by names (optional)</param>
        /// <param name="type">Request Categories by type (optional)</param>
        /// <param name="outlet">Request Categories by outlet (optional)</param>
        /// <param name="hidden">Request Categories by hidden (optional)</param>
        /// <param name="targetGroup">Request Categories by target group (optional)</param>
        /// <param name="key">Request Categories by keys (optional)</param>
        /// <param name="parentKey">Request Categories by parent keys (optional)</param>
        /// <param name="childKey">Request Categories by child keys (optional)</param>
        /// <param name="suggestedFilter">Request Categories by suggested filters (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Categories</returns>
        public Categories CategoriesGet (List<string> name = null, string type = null, string outlet = null, string hidden = null, string targetGroup = null, List<string> key = null, List<string> parentKey = null, List<string> childKey = null, List<string> suggestedFilter = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<Categories> localVarResponse = CategoriesGetWithHttpInfo(name, type, outlet, hidden, targetGroup, key, parentKey, childKey, suggestedFilter, page, pageSize, acceptLanguage, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Shop Categories Zalando API Categories Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Request Categories by names (optional)</param>
        /// <param name="type">Request Categories by type (optional)</param>
        /// <param name="outlet">Request Categories by outlet (optional)</param>
        /// <param name="hidden">Request Categories by hidden (optional)</param>
        /// <param name="targetGroup">Request Categories by target group (optional)</param>
        /// <param name="key">Request Categories by keys (optional)</param>
        /// <param name="parentKey">Request Categories by parent keys (optional)</param>
        /// <param name="childKey">Request Categories by child keys (optional)</param>
        /// <param name="suggestedFilter">Request Categories by suggested filters (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of Categories</returns>
        public ApiResponse< Categories > CategoriesGetWithHttpInfo (List<string> name = null, string type = null, string outlet = null, string hidden = null, string targetGroup = null, List<string> key = null, List<string> parentKey = null, List<string> childKey = null, List<string> suggestedFilter = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {

            var localVarPath = "/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (outlet != null) localVarQueryParams.Add("outlet", Configuration.ApiClient.ParameterToString(outlet)); // query parameter
            if (hidden != null) localVarQueryParams.Add("hidden", Configuration.ApiClient.ParameterToString(hidden)); // query parameter
            if (targetGroup != null) localVarQueryParams.Add("targetGroup", Configuration.ApiClient.ParameterToString(targetGroup)); // query parameter
            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter
            if (parentKey != null) localVarQueryParams.Add("parentKey", Configuration.ApiClient.ParameterToString(parentKey)); // query parameter
            if (childKey != null) localVarQueryParams.Add("childKey", Configuration.ApiClient.ParameterToString(childKey)); // query parameter
            if (suggestedFilter != null) localVarQueryParams.Add("suggestedFilter", Configuration.ApiClient.ParameterToString(suggestedFilter)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategoriesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Categories>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Categories) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Categories)));
            
        }

        /// <summary>
        /// Shop Categories Zalando API Categories Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Request Categories by names (optional)</param>
        /// <param name="type">Request Categories by type (optional)</param>
        /// <param name="outlet">Request Categories by outlet (optional)</param>
        /// <param name="hidden">Request Categories by hidden (optional)</param>
        /// <param name="targetGroup">Request Categories by target group (optional)</param>
        /// <param name="key">Request Categories by keys (optional)</param>
        /// <param name="parentKey">Request Categories by parent keys (optional)</param>
        /// <param name="childKey">Request Categories by child keys (optional)</param>
        /// <param name="suggestedFilter">Request Categories by suggested filters (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of Categories</returns>
        public async System.Threading.Tasks.Task<Categories> CategoriesGetAsync (List<string> name = null, string type = null, string outlet = null, string hidden = null, string targetGroup = null, List<string> key = null, List<string> parentKey = null, List<string> childKey = null, List<string> suggestedFilter = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<Categories> localVarResponse = await CategoriesGetAsyncWithHttpInfo(name, type, outlet, hidden, targetGroup, key, parentKey, childKey, suggestedFilter, page, pageSize, acceptLanguage, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Shop Categories Zalando API Categories Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Request Categories by names (optional)</param>
        /// <param name="type">Request Categories by type (optional)</param>
        /// <param name="outlet">Request Categories by outlet (optional)</param>
        /// <param name="hidden">Request Categories by hidden (optional)</param>
        /// <param name="targetGroup">Request Categories by target group (optional)</param>
        /// <param name="key">Request Categories by keys (optional)</param>
        /// <param name="parentKey">Request Categories by parent keys (optional)</param>
        /// <param name="childKey">Request Categories by child keys (optional)</param>
        /// <param name="suggestedFilter">Request Categories by suggested filters (optional)</param>
        /// <param name="page">to request with required page number or pagination (optional)</param>
        /// <param name="pageSize">to request with required page size in a page (optional)</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (Categories)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Categories>> CategoriesGetAsyncWithHttpInfo (List<string> name = null, string type = null, string outlet = null, string hidden = null, string targetGroup = null, List<string> key = null, List<string> parentKey = null, List<string> childKey = null, List<string> suggestedFilter = null, string page = null, string pageSize = null, string acceptLanguage = null, List<string> fields = null)
        {

            var localVarPath = "/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (outlet != null) localVarQueryParams.Add("outlet", Configuration.ApiClient.ParameterToString(outlet)); // query parameter
            if (hidden != null) localVarQueryParams.Add("hidden", Configuration.ApiClient.ParameterToString(hidden)); // query parameter
            if (targetGroup != null) localVarQueryParams.Add("targetGroup", Configuration.ApiClient.ParameterToString(targetGroup)); // query parameter
            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter
            if (parentKey != null) localVarQueryParams.Add("parentKey", Configuration.ApiClient.ParameterToString(parentKey)); // query parameter
            if (childKey != null) localVarQueryParams.Add("childKey", Configuration.ApiClient.ParameterToString(childKey)); // query parameter
            if (suggestedFilter != null) localVarQueryParams.Add("suggestedFilter", Configuration.ApiClient.ParameterToString(suggestedFilter)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategoriesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Categories>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Categories) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Categories)));
            
        }

        /// <summary>
        /// Get Single Category by Key Zalando API Category Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">To get unique Category by key.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Category</returns>
        public Category CategoriesKeyGet (List<string> key, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<Category> localVarResponse = CategoriesKeyGetWithHttpInfo(key, acceptLanguage, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Single Category by Key Zalando API Category Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">To get unique Category by key.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        public ApiResponse< Category > CategoriesKeyGetWithHttpInfo (List<string> key, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling CategoriesApi->CategoriesKeyGet");

            var localVarPath = "/categories/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategoriesKeyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
            
        }

        /// <summary>
        /// Get Single Category by Key Zalando API Category Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">To get unique Category by key.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> CategoriesKeyGetAsync (List<string> key, string acceptLanguage = null, List<string> fields = null)
        {
             ApiResponse<Category> localVarResponse = await CategoriesKeyGetAsyncWithHttpInfo(key, acceptLanguage, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Single Category by Key Zalando API Category Schema
        /// </summary>
        /// <exception cref="ZalandoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">To get unique Category by key.</param>
        /// <param name="acceptLanguage">choose shop (country and language) (optional)</param>
        /// <param name="fields">Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Category>> CategoriesKeyGetAsyncWithHttpInfo (List<string> key, string acceptLanguage = null, List<string> fields = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling CategoriesApi->CategoriesKeyGet");

            var localVarPath = "/categories/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategoriesKeyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
            
        }

    }
}
